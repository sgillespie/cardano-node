-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The Plutus Tx compiler and GHC plugin
--   
--   The Plutus Tx compiler and GHC plugin.
@package plutus-tx-plugin
@version 1.21.0.0

module PlutusTx.Compiler.Error
type CompileError uni fun ann = WithContext Text (Error uni fun ann)
data Error uni fun a
PLCError :: !Error uni fun a -> Error uni fun a
PIRError :: !Error uni fun (Provenance a) -> Error uni fun a
CompilationError :: !Text -> Error uni fun a
UnsupportedError :: !Text -> Error uni fun a
FreeVariableError :: !Text -> Error uni fun a
InvalidMarkerError :: !String -> Error uni fun a
CoreNameLookupError :: !Name -> Error uni fun a

-- | An error with some (nested) context. The integer argument to
--   <a>WithContextC</a> represents the priority of the context when
--   displaying it. Lower numbers are more prioritised.
data WithContext c e
NoContext :: e -> WithContext c e
WithContextC :: Int -> c -> WithContext c e -> WithContext c e
withContext :: MonadError (WithContext c e) m => Int -> c -> m a -> m a
withContextM :: MonadError (WithContext c e) m => Int -> m c -> m a -> m a
throwPlain :: MonadError (WithContext c e) m => e -> m a
pruneContext :: Int -> WithContext c e -> WithContext c e
instance PlutusTx.Compiler.Error.AsError (PlutusTx.Compiler.Error.Error uni fun a) uni fun a
instance (uni1 GHC.Types.~ uni2, b GHC.Types.~ PlutusIR.Compiler.Provenance.Provenance a) => PlutusCore.Error.AsTypeError (PlutusTx.Compiler.Error.CompileError uni1 fun a) (PlutusIR.Core.Type.Term PlutusCore.Name.TyName PlutusCore.Name.Name uni2 fun ()) uni2 fun b
instance (uni1 GHC.Types.~ uni2, b GHC.Types.~ PlutusIR.Compiler.Provenance.Provenance a) => PlutusIR.Error.AsTypeErrorExt (PlutusTx.Compiler.Error.CompileError uni1 fun a) uni2 b
instance (uni1 GHC.Types.~ uni2) => PlutusCore.Error.AsNormCheckError (PlutusTx.Compiler.Error.CompileError uni1 fun a) PlutusCore.Name.TyName PlutusCore.Name.Name uni2 fun a
instance PlutusCore.Error.AsUniqueError (PlutusTx.Compiler.Error.CompileError uni fun a) a
instance (uni1 GHC.Types.~ uni2, b GHC.Types.~ PlutusIR.Compiler.Provenance.Provenance a) => PlutusIR.Error.AsError (PlutusTx.Compiler.Error.CompileError uni1 fun a) uni2 fun b
instance (PlutusCore.Pretty.PrettyConst.PrettyUni uni, Prettyprinter.Internal.Pretty fun, Prettyprinter.Internal.Pretty a) => Prettyprinter.Internal.Pretty (PlutusTx.Compiler.Error.Error uni fun a)
instance (PlutusCore.Pretty.PrettyConst.PrettyUni uni, Prettyprinter.Internal.Pretty fun, Prettyprinter.Internal.Pretty a) => Text.PrettyBy.Internal.PrettyBy PlutusCore.Pretty.Plc.PrettyConfigPlc (PlutusTx.Compiler.Error.Error uni fun a)
instance PlutusTx.Compiler.Error.AsWithContext (PlutusTx.Compiler.Error.WithContext c e) c e
instance (Prettyprinter.Internal.Pretty c, Prettyprinter.Internal.Pretty e) => Prettyprinter.Internal.Pretty (PlutusTx.Compiler.Error.WithContext c e)
instance GHC.Base.Functor (PlutusTx.Compiler.Error.WithContext c)

module PlutusTx.Options
data PluginOptions
PluginOptions :: Version -> Bool -> Bool -> Bool -> Int -> Bool -> Bool -> Bool -> Bool -> Bool -> Verbosity -> Int -> Int -> Int -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> ProfileOpts -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> PluginOptions
[_posPlcTargetVersion] :: PluginOptions -> Version
[_posDoTypecheck] :: PluginOptions -> Bool
[_posDeferErrors] :: PluginOptions -> Bool
[_posConservativeOpts] :: PluginOptions -> Bool
[_posContextLevel] :: PluginOptions -> Int
[_posDumpPir] :: PluginOptions -> Bool
[_posDumpPlc] :: PluginOptions -> Bool
[_posDumpUPlc] :: PluginOptions -> Bool
[_posOptimize] :: PluginOptions -> Bool
[_posPedantic] :: PluginOptions -> Bool
[_posVerbosity] :: PluginOptions -> Verbosity
[_posMaxSimplifierIterationsPir] :: PluginOptions -> Int
[_posMaxSimplifierIterationsUPlc] :: PluginOptions -> Int
[_posMaxCseIterations] :: PluginOptions -> Int
[_posDoSimplifierUnwrapCancel] :: PluginOptions -> Bool
[_posDoSimplifierBeta] :: PluginOptions -> Bool
[_posDoSimplifierInline] :: PluginOptions -> Bool
[_posDoSimplifierEvaluateBuiltins] :: PluginOptions -> Bool
[_posDoSimplifierStrictifyBindings] :: PluginOptions -> Bool
[_posDoSimplifierRemoveDeadBindings] :: PluginOptions -> Bool
[_posProfile] :: PluginOptions -> ProfileOpts
[_posCoverageAll] :: PluginOptions -> Bool
[_posCoverageLocation] :: PluginOptions -> Bool
[_posCoverageBoolean] :: PluginOptions -> Bool
[_posRelaxedFloatin] :: PluginOptions -> Bool
[_posCaseOfCaseConservative] :: PluginOptions -> Bool

-- | Whether to try and retain the logging behaviour of the program.
[_posPreserveLogging] :: PluginOptions -> Bool
[_posRemoveTrace] :: PluginOptions -> Bool
[_posDumpCompilationTrace] :: PluginOptions -> Bool
posVerbosity :: Lens' PluginOptions Verbosity
posRemoveTrace :: Lens' PluginOptions Bool
posRelaxedFloatin :: Lens' PluginOptions Bool
posProfile :: Lens' PluginOptions ProfileOpts
posPreserveLogging :: Lens' PluginOptions Bool
posPlcTargetVersion :: Lens' PluginOptions Version
posPedantic :: Lens' PluginOptions Bool
posOptimize :: Lens' PluginOptions Bool
posMaxSimplifierIterationsUPlc :: Lens' PluginOptions Int
posMaxSimplifierIterationsPir :: Lens' PluginOptions Int
posMaxCseIterations :: Lens' PluginOptions Int
posDumpUPlc :: Lens' PluginOptions Bool
posDumpPlc :: Lens' PluginOptions Bool
posDumpPir :: Lens' PluginOptions Bool
posDumpCompilationTrace :: Lens' PluginOptions Bool
posDoTypecheck :: Lens' PluginOptions Bool
posDoSimplifierUnwrapCancel :: Lens' PluginOptions Bool
posDoSimplifierStrictifyBindings :: Lens' PluginOptions Bool
posDoSimplifierRemoveDeadBindings :: Lens' PluginOptions Bool
posDoSimplifierInline :: Lens' PluginOptions Bool
posDoSimplifierEvaluateBuiltins :: Lens' PluginOptions Bool
posDoSimplifierBeta :: Lens' PluginOptions Bool
posDeferErrors :: Lens' PluginOptions Bool
posCoverageLocation :: Lens' PluginOptions Bool
posCoverageBoolean :: Lens' PluginOptions Bool
posCoverageAll :: Lens' PluginOptions Bool
posContextLevel :: Lens' PluginOptions Int
posConservativeOpts :: Lens' PluginOptions Bool
posCaseOfCaseConservative :: Lens' PluginOptions Bool
type OptionKey = Text
type OptionValue = Text

-- | A data type representing option <tt>a</tt> implying option <tt>b</tt>.
data Implication a
Implication :: (a -> Bool) -> Lens' PluginOptions b -> b -> Implication a

-- | A plugin option definition for a <a>PluginOptions</a> field of type
--   <tt>a</tt>.
data PluginOption
PluginOption :: TypeRep a -> (Maybe OptionValue -> Validation ParseError (a -> a)) -> Lens' PluginOptions a -> Text -> [Implication a] -> PluginOption

-- | <a>TypeRep</a> used for pretty printing the option.
[poTypeRep] :: PluginOption -> TypeRep a

-- | Consumes an optional value, and either updates the field or reports an
--   error.
[poFun] :: PluginOption -> Maybe OptionValue -> Validation ParseError (a -> a)

-- | Lens focusing on the field. This is for modifying the field, as well
--   as getting the field value from <a>defaultPluginOptions</a> for pretty
--   printing.
[poLens] :: PluginOption -> Lens' PluginOptions a

-- | A description of the option.
[poDescription] :: PluginOption -> Text

-- | Implications of this option being set to a particular value. An option
--   should not imply itself.
[poImplications] :: PluginOption -> [Implication a]
data ParseError
CannotParseValue :: !OptionKey -> !OptionValue -> !SomeTypeRep -> ParseError
UnexpectedValue :: !OptionKey -> !OptionValue -> ParseError
MissingValue :: !OptionKey -> ParseError
UnrecognisedOption :: !OptionKey -> ![OptionKey] -> ParseError
newtype ParseErrors
ParseErrors :: NonEmpty ParseError -> ParseErrors
renderParseError :: ParseError -> Text

-- | Definition of plugin options.
--   
--   TODO: write a description for each option.
pluginOptions :: Map OptionKey PluginOption
flag :: (a -> a) -> OptionKey -> Maybe OptionValue -> Validation ParseError (a -> a)
setTrue :: OptionKey -> Maybe OptionValue -> Validation ParseError (Bool -> Bool)
plcParserOption :: Parser a -> OptionKey -> Maybe OptionValue -> Validation ParseError (a -> a)
readOption :: Read a => OptionKey -> Maybe OptionValue -> Validation ParseError (a -> a)

-- | Obtain an option value of type <tt>a</tt> from an <a>Int</a>.
fromReadOption :: Read a => OptionKey -> (a -> Validation ParseError b) -> Maybe OptionValue -> Validation ParseError (b -> b)
defaultPluginOptions :: PluginOptions
processOne :: OptionKey -> Maybe OptionValue -> Validation ParseError (PluginOptions -> PluginOptions)
applyImplications :: Lens' PluginOptions a -> [Implication a] -> PluginOptions -> PluginOptions
processAll :: [(OptionKey, Maybe OptionValue)] -> Validation ParseErrors [PluginOptions -> PluginOptions]
toKeyValue :: CommandLineOption -> (OptionKey, Maybe OptionValue)

-- | Parses the arguments that were given to ghc at commandline as
--   "-fplugin-opt PlutusTx.Plugin:opt" or "-fplugin-opt
--   PlutusTx.Plugin:opt=val"
parsePluginOptions :: [CommandLineOption] -> Validation ParseErrors PluginOptions
instance GHC.Show.Show PlutusTx.Options.ParseError
instance GHC.Base.Semigroup PlutusTx.Options.ParseErrors
instance GHC.Show.Show PlutusTx.Options.ParseErrors
instance GHC.Exception.Type.Exception PlutusTx.Options.ParseErrors

module PlutusTx.Plugin
plugin :: Plugin
plc :: forall (loc :: Symbol) a. Proxy loc -> a -> CompiledCode a
