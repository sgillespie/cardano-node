-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | See README for more info
--   
--   See README for more info
@package ekg-forward
@version 0.4


-- | The type of the EKG forwarding/accepting protocol.
--   
--   Since we are using a typed protocol framework this is in some sense
--   <i>the</i> definition of the protocol: what is allowed and what is not
--   allowed.
module System.Metrics.Protocol.Type

-- | A kind to identify our protocol, and the types of the states in the
--   state transition diagram of the protocol.
--   
--   IMPORTANT NOTE: the following terminology is used:
--   
--   <ol>
--   <li>From the protocol's point of view, two peers talk to each other:
--   the forwarder and the acceptor.</li>
--   <li>The forwarder is an application that collects EKG metrics and
--   sends them to the acceptor by request.</li>
--   <li>The acceptor is an application that receives EKG metrics from the
--   forwarder.</li>
--   <li>You can this of the forwarder as a client, and the acceptor as a
--   server:</li>
--   <li>1. The client is "initially active side", because it establishes
--   the connection with the server.</li>
--   <li>2. The server is "initially passive side", because it accepts the
--   connection from the client.</li>
--   <li>But after the connection is established, the roles are REVERSED:
--   the acceptor becomes an active side because it asks the metrics, the
--   forwarder becomes a passive side because it waits for the request from
--   the acceptor, collects the metrics and sends them to the
--   acceptor.</li>
--   </ol>
data EKGForward req resp

-- | Both acceptor and forwarder are in idle state. The acceptor can send a
--   request for the metrics and the forwarder is waiting for a request.
[StIdle] :: EKGForward req resp

-- | The acceptor has sent a next request for the metrics. The acceptor is
--   now waiting for a response, and the forwarder is busy getting ready to
--   send a response with new metrics. It is assumed that the forwarder can
--   send a reply immediately (with the current list of the metrics).
[StBusy] :: EKGForward req resp

-- | Both the acceptor and forwarder are in the terminal state. They're
--   done.
[StDone] :: EKGForward req resp
data family Message ps (st :: ps) (st' :: ps)
data family ClientHasAgency (st :: ps)
data family ServerHasAgency (st :: ps)
data family NobodyHasAgency (st :: ps)
instance forall k1 k2 (req :: k1) (resp :: k2). (Ouroboros.Network.Util.ShowProxy.ShowProxy req, Ouroboros.Network.Util.ShowProxy.ShowProxy resp) => Ouroboros.Network.Util.ShowProxy.ShowProxy (System.Metrics.Protocol.Type.EKGForward req resp)
instance forall k1 k2 (req :: k1) (resp :: k2). Network.TypedProtocol.Core.Protocol (System.Metrics.Protocol.Type.EKGForward req resp)
instance forall req resp (from :: System.Metrics.Protocol.Type.EKGForward req resp) (to :: System.Metrics.Protocol.Type.EKGForward req resp). (GHC.Show.Show req, GHC.Show.Show resp) => GHC.Show.Show (Network.TypedProtocol.Core.Message (System.Metrics.Protocol.Type.EKGForward req resp) from to)
instance forall k1 k2 (req :: k1) (resp :: k2) (st :: System.Metrics.Protocol.Type.EKGForward req resp). GHC.Show.Show (Network.TypedProtocol.Core.ClientHasAgency st)
instance forall k1 k2 (req :: k1) (resp :: k2) (st :: System.Metrics.Protocol.Type.EKGForward req resp). GHC.Show.Show (Network.TypedProtocol.Core.ServerHasAgency st)

module System.Metrics.Protocol.Forwarder

-- | Please note that the forwarder is a client from the <b>networking</b>
--   point of view: it establishes network connection with the acceptor.
--   But after the connection is established, the forwarder becomes a
--   server from the <b>interaction</b> point of view: the acceptor sends a
--   request for new metrics, the forwarder replies to the acceptor.
data EKGForwarder req resp m a
EKGForwarder :: (req -> m (resp, EKGForwarder req resp m a)) -> m a -> EKGForwarder req resp m a

-- | The acceptor sent us a request for new metrics.
[recvMsgReq] :: EKGForwarder req resp m a -> req -> m (resp, EKGForwarder req resp m a)

-- | The acceptor terminated. Here we have a pure return value, but we
--   could have done another action in <tt>m</tt> if we wanted to.
[recvMsgDone] :: EKGForwarder req resp m a -> m a

-- | Interpret a particular action sequence into the server side of the
--   <a>EKGForward</a> protocol.
ekgForwarderPeer :: Monad m => EKGForwarder req resp m a -> Peer (EKGForward req resp) 'AsServer 'StIdle m a

module System.Metrics.Protocol.Codec
codecEKGForward :: forall req resp m. MonadST m => (req -> Encoding) -> (forall s. Decoder s req) -> (resp -> Encoding) -> (forall s. Decoder s resp) -> Codec (EKGForward req resp) DeserialiseFailure m ByteString


-- | A view of the EKG forwarding/accepting protocol from the point of view
--   of the client.
--   
--   For execution, a conversion into the typed protocol is provided.
module System.Metrics.Protocol.Acceptor

-- | Please note that the acceptor is a server from the <b>networking</b>
--   point of view: the forwarder establishes network connection with the
--   acceptor. But after the connection is established, the acceptor
--   becomes a client from the <b>interaction</b> point of view: it sends a
--   request for new metrics, the forwarder replies to the acceptor.
data EKGAcceptor req resp m a
[SendMsgReq] :: req -> (resp -> m (EKGAcceptor req resp m a)) -> EKGAcceptor req resp m a
[SendMsgDone] :: m a -> EKGAcceptor req resp m a

-- | Interpret a particular action sequence into the client side of the
--   <a>EKGForward</a> protocol.
ekgAcceptorPeer :: Monad m => EKGAcceptor req resp m a -> Peer (EKGForward req resp) 'AsClient 'StIdle m a

module System.Metrics.ReqResp

-- | Each EKG metric has a unique name.
type MetricName = Text

-- | Metric value that will be transmitted from the forwarder to the
--   acceptor. Please note that EKG.Distribution is not supported yet.
data MetricValue

-- | Counter value.
CounterValue :: !Int64 -> MetricValue

-- | Gauge value.
GaugeValue :: !Int64 -> MetricValue

-- | Text label.
LabelValue :: !Text -> MetricValue

-- | The request for the new metrics. The acceptor will send this request
--   to the forwarder.
data Request

-- | Get all metrics from the forwarder's local store.
GetAllMetrics :: Request

-- | Get specific metrics only.
GetMetrics :: !NonEmpty MetricName -> Request

-- | The response with the metrics. The forwarder will send it to the
--   acceptor as a reply for the request. Please note that the list of
--   metrics can be empty (for example, if the forwarder's local store is
--   empty).
newtype Response
ResponseMetrics :: [(MetricName, MetricValue)] -> Response
instance GHC.Generics.Generic System.Metrics.ReqResp.MetricValue
instance GHC.Show.Show System.Metrics.ReqResp.MetricValue
instance GHC.Classes.Eq System.Metrics.ReqResp.MetricValue
instance GHC.Show.Show System.Metrics.ReqResp.Request
instance GHC.Generics.Generic System.Metrics.ReqResp.Request
instance GHC.Classes.Eq System.Metrics.ReqResp.Request
instance GHC.Show.Show System.Metrics.ReqResp.Response
instance GHC.Generics.Generic System.Metrics.ReqResp.Response
instance Ouroboros.Network.Util.ShowProxy.ShowProxy System.Metrics.ReqResp.Response
instance Codec.Serialise.Class.Serialise System.Metrics.ReqResp.Response
instance Ouroboros.Network.Util.ShowProxy.ShowProxy System.Metrics.ReqResp.Request
instance Codec.Serialise.Class.Serialise System.Metrics.ReqResp.Request
instance Ouroboros.Network.Util.ShowProxy.ShowProxy System.Metrics.ReqResp.MetricValue
instance Codec.Serialise.Class.Serialise System.Metrics.ReqResp.MetricValue

module System.Metrics.Configuration

-- | Acceptor configuration.
data AcceptorConfiguration
AcceptorConfiguration :: !Tracer IO (TraceSendRecv (EKGForward Request Response)) -> !HowToConnect -> !NominalDiffTime -> !Request -> !TVar Bool -> AcceptorConfiguration

-- | The tracer that will be used by the acceptor in its network layer. For
--   more info about tracers please read its <a>documentation</a>.
[acceptorTracer] :: AcceptorConfiguration -> !Tracer IO (TraceSendRecv (EKGForward Request Response))

-- | The endpoint that will be used to listen to the forwarder.
[forwarderEndpoint] :: AcceptorConfiguration -> !HowToConnect

-- | Specifies how often the acceptor will ask the framework for new
--   metrics. It can be specified as seconds or as fraction of second.
[requestFrequency] :: AcceptorConfiguration -> !NominalDiffTime

-- | Specifies what to request: all existing metrics or particular metrics.
[whatToRequest] :: AcceptorConfiguration -> !Request

-- | <a>TVar</a> that can be used as a brake: if an external thread will
--   set it to <a>True</a>, the acceptor will send <tt>MsgDone</tt> message
--   to the forwarder and their session will be closed.
[shouldWeStop] :: AcceptorConfiguration -> !TVar Bool

-- | Forwarder configuration.
data ForwarderConfiguration
ForwarderConfiguration :: !Tracer IO (TraceSendRecv (EKGForward Request Response)) -> !HowToConnect -> !NominalDiffTime -> !Request -> IO () -> ForwarderConfiguration

-- | The tracer that will be used by the forwarder in its network layer.
[forwarderTracer] :: ForwarderConfiguration -> !Tracer IO (TraceSendRecv (EKGForward Request Response))

-- | The endpoint that will be used to connect to the acceptor.
[acceptorEndpoint] :: ForwarderConfiguration -> !HowToConnect

-- | If the connection with the acceptor will fail, the forwarder will
--   attempt to re-establish the connection after this delay. It can be
--   specified as seconds or as fraction of second.
[reConnectFrequency] :: ForwarderConfiguration -> !NominalDiffTime

-- | Additional action that will be performed every time the forwarder will
--   receive the request from the acceptor.
[actionOnRequest] :: ForwarderConfiguration -> !Request -> IO ()

-- | Specifies how to connect to the peer.
data HowToConnect

-- | Local pipe (UNIX or Windows).
LocalPipe :: !FilePath -> HowToConnect

-- | Remote socket (host and port).
RemoteSocket :: !Host -> !Port -> HowToConnect
type Host = Text
type Port = Word16

module System.Metrics.Store.Acceptor
storeMetrics :: Response -> Store -> TVar MetricsLocalStore -> IO ()
data MetricsLocalStore
MetricsLocalStore :: !HashMap MetricName Counter -> !HashMap MetricName Gauge -> !HashMap MetricName Label -> MetricsLocalStore
[ekgCounters] :: MetricsLocalStore -> !HashMap MetricName Counter
[ekgGauges] :: MetricsLocalStore -> !HashMap MetricName Gauge
[ekgLabels] :: MetricsLocalStore -> !HashMap MetricName Label
emptyMetricsLocalStore :: MetricsLocalStore

module System.Metrics.Network.Acceptor
listenToForwarder :: AcceptorConfiguration -> (ResponderContext (Either LocalAddress SockAddr) -> IO (Store, TVar MetricsLocalStore)) -> (ResponderContext (Either LocalAddress SockAddr) -> IO ()) -> IO Void
acceptEKGMetricsInit :: AcceptorConfiguration -> (initiatorCtx -> IO (Store, TVar MetricsLocalStore)) -> (initiatorCtx -> IO ()) -> RunMiniProtocol 'InitiatorMode initiatorCtx responderCtx ByteString IO () Void
acceptEKGMetricsResp :: AcceptorConfiguration -> (responderCtx -> IO (Store, TVar MetricsLocalStore)) -> (responderCtx -> IO ()) -> RunMiniProtocol 'ResponderMode initiatorCtx responderCtx ByteString IO Void ()


-- | This top-level module will be used by the acceptor app (the app that
--   asks EKG metrics from the forwarder app).
module System.Metrics.Acceptor
runEKGAcceptor :: AcceptorConfiguration -> Store -> IO ()

module System.Metrics.Store.Forwarder
mkResponse :: ForwarderConfiguration -> Store -> EKGForwarder Request Response IO ()
mkResponseDummy :: EKGForwarder Request Response IO ()

module System.Metrics.Network.Forwarder
connectToAcceptor :: ForwarderConfiguration -> Store -> IO ()
forwardEKGMetrics :: ForwarderConfiguration -> Store -> RunMiniProtocol 'InitiatorMode initiatorCtx responderCtx ByteString IO () Void
forwardEKGMetricsDummy :: RunMiniProtocol 'InitiatorMode initiatorCtx responderCtx ByteString IO () Void
forwardEKGMetricsResp :: ForwarderConfiguration -> Store -> RunMiniProtocol 'ResponderMode initiatorCtx responderCtx ByteString IO Void ()
forwardEKGMetricsRespDummy :: RunMiniProtocol 'ResponderMode initiatorCtx responderCtx ByteString IO Void ()

module System.Metrics.Forwarder

-- | Please note that forwarder is a client from the <b>networking</b>
--   point of view: it establishes network connection with the acceptor.
runEKGForwarder :: ForwarderConfiguration -> Store -> IO ()
