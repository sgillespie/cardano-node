-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The cardano api
--   
--   The cardano api.
@package cardano-api
@version 8.38.0.1


-- | This module provides a library interface for interacting with Cardano
--   as a user of the system.
--   
--   It is intended to be the complete API covering everything but without
--   exposing constructors that reveal any lower level types.
--   
--   In the interest of simplicity it glosses over some details of the
--   system. Most simple tools should be able to work just using this
--   interface, however you can go deeper and expose the types from the
--   underlying libraries using <a>Cardano.Api.Byron</a> or
--   <a>Cardano.Api.Shelley</a>.
module Cardano.Api
data () => ByronEra
data () => ShelleyEra
data () => AllegraEra
data () => MaryEra
data () => AlonzoEra
data () => BabbageEra
data () => ConwayEra
data () => CardanoEra era
[ByronEra] :: CardanoEra ByronEra
[ShelleyEra] :: CardanoEra ShelleyEra
[AllegraEra] :: CardanoEra AllegraEra
[MaryEra] :: CardanoEra MaryEra
[AlonzoEra] :: CardanoEra AlonzoEra
[BabbageEra] :: CardanoEra BabbageEra
[ConwayEra] :: CardanoEra ConwayEra
class HasTypeProxy era => IsCardanoEra era
cardanoEra :: IsCardanoEra era => CardanoEra era
data () => AnyCardanoEra
[AnyCardanoEra] :: forall era. Typeable era => CardanoEra era -> AnyCardanoEra
anyCardanoEra :: CardanoEra era -> AnyCardanoEra
data () => InAnyCardanoEra (thing :: Type -> Type)
[InAnyCardanoEra] :: forall era (thing :: Type -> Type). Typeable era => CardanoEra era -> thing era -> InAnyCardanoEra thing
inAnyCardanoEra :: CardanoEra era -> thing era -> InAnyCardanoEra thing
cardanoEraConstraints :: CardanoEra era -> (CardanoEraConstraints era => a) -> a
class () => ToCardanoEra (eon :: Type -> Type)
toCardanoEra :: ToCardanoEra eon => eon era -> CardanoEra era
class () => Eon (eon :: Type -> Type)
inEonForEra :: Eon eon => a -> (eon era -> a) -> CardanoEra era -> a
data () => EraInEon (eon :: Type -> Type)
[EraInEon] :: forall era (eon :: Type -> Type). (Typeable era, Typeable (eon era), Eon eon) => eon era -> EraInEon eon
inEonForEraMaybe :: Eon eon => (eon era -> a) -> CardanoEra era -> Maybe a
forEraInEon :: Eon eon => CardanoEra era -> a -> (eon era -> a) -> a
forEraInEonMaybe :: Eon eon => CardanoEra era -> (eon era -> a) -> Maybe a
forEraMaybeEon :: Eon eon => CardanoEra era -> Maybe (eon era)
maybeEon :: (Eon eon, IsCardanoEra era) => Maybe (eon era)
monoidForEraInEon :: (Eon eon, Monoid a) => CardanoEra era -> (eon era -> a) -> a
monoidForEraInEonA :: (Eon eon, Applicative f, Monoid a) => CardanoEra era -> (eon era -> f a) -> f a
inEonForShelleyBasedEra :: Eon eon => a -> (eon era -> a) -> ShelleyBasedEra era -> a
inEonForShelleyBasedEraMaybe :: Eon eon => (eon era -> a) -> ShelleyBasedEra era -> Maybe a
forShelleyBasedEraInEon :: Eon eon => ShelleyBasedEra era -> a -> (eon era -> a) -> a
forShelleyBasedEraInEonMaybe :: Eon eon => ShelleyBasedEra era -> (eon era -> a) -> Maybe a
forShelleyBasedEraMaybeEon :: Eon eon => ShelleyBasedEra era -> Maybe (eon era)
data () => Featured (eon :: Type -> Type) era a
[Featured] :: forall (eon :: Type -> Type) era a. eon era -> a -> Featured eon era a
asFeaturedInEra :: forall (eon :: Type -> Type) a era. Eon eon => a -> CardanoEra era -> Maybe (Featured eon era a)
asFeaturedInShelleyBasedEra :: forall (eon :: Type -> Type) a era. Eon eon => a -> ShelleyBasedEra era -> Maybe (Featured eon era a)
data () => ByronToAlonzoEra era
[ByronToAlonzoEraByron] :: ByronToAlonzoEra ByronEra
[ByronToAlonzoEraShelley] :: ByronToAlonzoEra ShelleyEra
[ByronToAlonzoEraAllegra] :: ByronToAlonzoEra AllegraEra
[ByronToAlonzoEraMary] :: ByronToAlonzoEra MaryEra
[ByronToAlonzoEraAlonzo] :: ByronToAlonzoEra AlonzoEra
byronToAlonzoEraConstraints :: ByronToAlonzoEra era -> (ByronToAlonzoEraConstraints era => a) -> a
byronToAlonzoEraToCardanoEra :: ByronToAlonzoEra era -> CardanoEra era
data () => ShelleyEraOnly era
[ShelleyEraOnlyShelley] :: ShelleyEraOnly ShelleyEra
shelleyEraOnlyConstraints :: ShelleyEraOnly era -> (ShelleyEraOnlyConstraints era => a) -> a
shelleyEraOnlyToCardanoEra :: ShelleyEraOnly era -> CardanoEra era
shelleyEraOnlyToShelleyBasedEra :: ShelleyEraOnly era -> ShelleyBasedEra era
data () => ShelleyToAllegraEra era
[ShelleyToAllegraEraShelley] :: ShelleyToAllegraEra ShelleyEra
[ShelleyToAllegraEraAllegra] :: ShelleyToAllegraEra AllegraEra
shelleyToAllegraEraConstraints :: ShelleyToAllegraEra era -> (ShelleyToAllegraEraConstraints era => a) -> a
shelleyToAllegraEraToCardanoEra :: ShelleyToAllegraEra era -> CardanoEra era
shelleyToAllegraEraToShelleyBasedEra :: ShelleyToAllegraEra era -> ShelleyBasedEra era
data () => ShelleyToMaryEra era
[ShelleyToMaryEraShelley] :: ShelleyToMaryEra ShelleyEra
[ShelleyToMaryEraAllegra] :: ShelleyToMaryEra AllegraEra
[ShelleyToMaryEraMary] :: ShelleyToMaryEra MaryEra
shelleyToMaryEraConstraints :: ShelleyToMaryEra era -> (ShelleyToMaryEraConstraints era => a) -> a
shelleyToMaryEraToCardanoEra :: ShelleyToMaryEra era -> CardanoEra era
shelleyToMaryEraToShelleyBasedEra :: ShelleyToMaryEra era -> ShelleyBasedEra era
data () => ShelleyToAlonzoEra era
[ShelleyToAlonzoEraShelley] :: ShelleyToAlonzoEra ShelleyEra
[ShelleyToAlonzoEraAllegra] :: ShelleyToAlonzoEra AllegraEra
[ShelleyToAlonzoEraMary] :: ShelleyToAlonzoEra MaryEra
[ShelleyToAlonzoEraAlonzo] :: ShelleyToAlonzoEra AlonzoEra
shelleyToAlonzoEraConstraints :: ShelleyToAlonzoEra era -> (ShelleyToAlonzoEraConstraints era => a) -> a
shelleyToAlonzoEraToCardanoEra :: ShelleyToAlonzoEra era -> CardanoEra era
shelleyToAlonzoEraToShelleyBasedEra :: ShelleyToAlonzoEra era -> ShelleyBasedEra era
data () => ShelleyToBabbageEra era
[ShelleyToBabbageEraShelley] :: ShelleyToBabbageEra ShelleyEra
[ShelleyToBabbageEraAllegra] :: ShelleyToBabbageEra AllegraEra
[ShelleyToBabbageEraMary] :: ShelleyToBabbageEra MaryEra
[ShelleyToBabbageEraAlonzo] :: ShelleyToBabbageEra AlonzoEra
[ShelleyToBabbageEraBabbage] :: ShelleyToBabbageEra BabbageEra
shelleyToBabbageEraConstraints :: ShelleyToBabbageEra era -> (ShelleyToBabbageEraConstraints era => a) -> a
shelleyToBabbageEraToCardanoEra :: ShelleyToBabbageEra era -> CardanoEra era
shelleyToBabbageEraToShelleyBasedEra :: ShelleyToBabbageEra era -> ShelleyBasedEra era
data () => ShelleyBasedEra era
[ShelleyBasedEraShelley] :: ShelleyBasedEra ShelleyEra
[ShelleyBasedEraAllegra] :: ShelleyBasedEra AllegraEra
[ShelleyBasedEraMary] :: ShelleyBasedEra MaryEra
[ShelleyBasedEraAlonzo] :: ShelleyBasedEra AlonzoEra
[ShelleyBasedEraBabbage] :: ShelleyBasedEra BabbageEra
[ShelleyBasedEraConway] :: ShelleyBasedEra ConwayEra
class IsCardanoEra era => IsShelleyBasedEra era
shelleyBasedEra :: IsShelleyBasedEra era => ShelleyBasedEra era
data () => AnyShelleyBasedEra
[AnyShelleyBasedEra] :: forall era. Typeable era => ShelleyBasedEra era -> AnyShelleyBasedEra
data () => InAnyShelleyBasedEra (thing :: Type -> Type)
[InAnyShelleyBasedEra] :: forall era (thing :: Type -> Type). Typeable era => ShelleyBasedEra era -> thing era -> InAnyShelleyBasedEra thing
inAnyShelleyBasedEra :: ShelleyBasedEra era -> thing era -> InAnyShelleyBasedEra thing
shelleyBasedToCardanoEra :: ShelleyBasedEra era -> CardanoEra era
shelleyBasedEraConstraints :: ShelleyBasedEra era -> (ShelleyBasedEraConstraints era => a) -> a
data () => AllegraEraOnwards era
[AllegraEraOnwardsAllegra] :: AllegraEraOnwards AllegraEra
[AllegraEraOnwardsMary] :: AllegraEraOnwards MaryEra
[AllegraEraOnwardsAlonzo] :: AllegraEraOnwards AlonzoEra
[AllegraEraOnwardsBabbage] :: AllegraEraOnwards BabbageEra
[AllegraEraOnwardsConway] :: AllegraEraOnwards ConwayEra
data () => MaryEraOnwards era
[MaryEraOnwardsMary] :: MaryEraOnwards MaryEra
[MaryEraOnwardsAlonzo] :: MaryEraOnwards AlonzoEra
[MaryEraOnwardsBabbage] :: MaryEraOnwards BabbageEra
[MaryEraOnwardsConway] :: MaryEraOnwards ConwayEra
maryEraOnwardsConstraints :: MaryEraOnwards era -> (MaryEraOnwardsConstraints era => a) -> a
maryEraOnwardsToCardanoEra :: MaryEraOnwards era -> CardanoEra era
maryEraOnwardsToShelleyBasedEra :: MaryEraOnwards era -> ShelleyBasedEra era
data () => AlonzoEraOnwards era
[AlonzoEraOnwardsAlonzo] :: AlonzoEraOnwards AlonzoEra
[AlonzoEraOnwardsBabbage] :: AlonzoEraOnwards BabbageEra
[AlonzoEraOnwardsConway] :: AlonzoEraOnwards ConwayEra
alonzoEraOnwardsConstraints :: AlonzoEraOnwards era -> (AlonzoEraOnwardsConstraints era => a) -> a
alonzoEraOnwardsToCardanoEra :: AlonzoEraOnwards era -> CardanoEra era
alonzoEraOnwardsToShelleyBasedEra :: AlonzoEraOnwards era -> ShelleyBasedEra era
data () => BabbageEraOnwards era
[BabbageEraOnwardsBabbage] :: BabbageEraOnwards BabbageEra
[BabbageEraOnwardsConway] :: BabbageEraOnwards ConwayEra
babbageEraOnwardsConstraints :: BabbageEraOnwards era -> (BabbageEraOnwardsConstraints era => a) -> a
babbageEraOnwardsToCardanoEra :: BabbageEraOnwards era -> CardanoEra era
babbageEraOnwardsToShelleyBasedEra :: BabbageEraOnwards era -> ShelleyBasedEra era
data () => ConwayEraOnwards era
[ConwayEraOnwardsConway] :: ConwayEraOnwards ConwayEra
conwayEraOnwardsConstraints :: ConwayEraOnwards era -> (ConwayEraOnwardsConstraints era => a) -> a
conwayEraOnwardsToCardanoEra :: ConwayEraOnwards era -> CardanoEra era
conwayEraOnwardsToShelleyBasedEra :: ConwayEraOnwards era -> ShelleyBasedEra era
caseByronOrShelleyBasedEra :: a -> (ShelleyBasedEraConstraints era => ShelleyBasedEra era -> a) -> CardanoEra era -> a
caseByronToAlonzoOrBabbageEraOnwards :: (ByronToAlonzoEraConstraints era => ByronToAlonzoEra era -> a) -> (BabbageEraOnwardsConstraints era => BabbageEraOnwards era -> a) -> CardanoEra era -> a
caseShelleyEraOnlyOrAllegraEraOnwards :: (ShelleyEraOnlyConstraints era => ShelleyEraOnly era -> a) -> (AllegraEraOnwardsConstraints era => AllegraEraOnwards era -> a) -> ShelleyBasedEra era -> a
caseShelleyToAllegraOrMaryEraOnwards :: (ShelleyToAllegraEraConstraints era => ShelleyToAllegraEra era -> a) -> (MaryEraOnwardsConstraints era => MaryEraOnwards era -> a) -> ShelleyBasedEra era -> a
caseShelleyToMaryOrAlonzoEraOnwards :: (ShelleyToMaryEraConstraints era => ShelleyToMaryEra era -> a) -> (AlonzoEraOnwardsConstraints era => AlonzoEraOnwards era -> a) -> ShelleyBasedEra era -> a
caseShelleyToAlonzoOrBabbageEraOnwards :: (ShelleyToAlonzoEraConstraints era => ShelleyToAlonzoEra era -> a) -> (BabbageEraOnwardsConstraints era => BabbageEraOnwards era -> a) -> ShelleyBasedEra era -> a
caseShelleyToBabbageOrConwayEraOnwards :: (ShelleyToBabbageEraConstraints era => ShelleyToBabbageEra era -> a) -> (ConwayEraOnwardsConstraints era => ConwayEraOnwards era -> a) -> ShelleyBasedEra era -> a
shelleyToAlonzoEraToShelleyToBabbageEra :: ShelleyToAlonzoEra era -> ShelleyToBabbageEra era
alonzoEraOnwardsToMaryEraOnwards :: AlonzoEraOnwards era -> MaryEraOnwards era
babbageEraOnwardsToMaryEraOnwards :: BabbageEraOnwards era -> MaryEraOnwards era
babbageEraOnwardsToAlonzoEraOnwards :: BabbageEraOnwards era -> AlonzoEraOnwards era
requireShelleyBasedEra :: Applicative m => CardanoEra era -> m (Maybe (ShelleyBasedEra era))
newtype () => File content (direction :: FileDirection)
File :: FilePath -> File content (direction :: FileDirection)
[unFile] :: File content (direction :: FileDirection) -> FilePath
data () => FileDirection
In :: FileDirection
Out :: FileDirection
InOut :: FileDirection
mapFile :: forall content (direction :: FileDirection). (FilePath -> FilePath) -> File content direction -> File content direction
onlyIn :: File content 'InOut -> File content 'In
onlyOut :: File content 'InOut -> File content 'Out
intoFile :: File content 'Out -> content -> (File content 'Out -> stream -> result) -> (content -> stream) -> result
readByteStringFile :: MonadIO m => File content 'In -> m (Either (FileError e) ByteString)
readLazyByteStringFile :: MonadIO m => File content 'In -> m (Either (FileError e) ByteString)
readTextFile :: MonadIO m => File content 'In -> m (Either (FileError e) Text)
writeByteStringFileWithOwnerPermissions :: FilePath -> ByteString -> IO (Either (FileError e) ())
writeByteStringFile :: MonadIO m => File content 'Out -> ByteString -> m (Either (FileError e) ())
writeByteStringOutput :: MonadIO m => Maybe (File content 'Out) -> ByteString -> m (Either (FileError e) ())
writeLazyByteStringFileWithOwnerPermissions :: File content 'Out -> ByteString -> IO (Either (FileError e) ())
writeLazyByteStringFile :: MonadIO m => File content 'Out -> ByteString -> m (Either (FileError e) ())
writeLazyByteStringOutput :: MonadIO m => Maybe (File content 'Out) -> ByteString -> m (Either (FileError e) ())
writeTextFileWithOwnerPermissions :: File content 'Out -> Text -> IO (Either (FileError e) ())
writeTextFile :: MonadIO m => File content 'Out -> Text -> m (Either (FileError e) ())
writeTextOutput :: MonadIO m => Maybe (File content 'Out) -> Text -> m (Either (FileError e) ())
class Typeable t => HasTypeProxy t where {
    data family AsType t;
}
proxyToAsType :: HasTypeProxy t => Proxy t -> AsType t
data family AsType t
pattern AsByronAddress :: AsType (Address ByronAddr)
pattern AsShelleyAddress :: AsType (Address ShelleyAddr)
pattern AsAllegraTx :: AsType (Tx AllegraEra)
pattern AsAlonzoTx :: AsType (Tx AlonzoEra)
pattern AsByronTx :: AsType (Tx ByronEra)
pattern AsByronTxBody :: AsType (TxBody ByronEra)
pattern AsByronWitness :: AsType (KeyWitness ByronEra)
pattern AsMaryTx :: AsType (Tx MaryEra)
pattern AsMaryTxBody :: AsType (TxBody MaryEra)
pattern AsShelleyTx :: AsType (Tx ShelleyEra)
pattern AsShelleyTxBody :: AsType (TxBody ShelleyEra)
pattern AsShelleyWitness :: AsType (KeyWitness ShelleyEra)
class (Eq VerificationKey keyrole, Show VerificationKey keyrole, SerialiseAsRawBytes Hash keyrole, HasTextEnvelope VerificationKey keyrole, HasTextEnvelope SigningKey keyrole) => Key keyrole where {
    data family VerificationKey keyrole;
    data family SigningKey keyrole;
}
getVerificationKey :: Key keyrole => SigningKey keyrole -> VerificationKey keyrole
deterministicSigningKey :: Key keyrole => AsType keyrole -> Seed -> SigningKey keyrole
deterministicSigningKeySeedSize :: Key keyrole => AsType keyrole -> Word
verificationKeyHash :: Key keyrole => VerificationKey keyrole -> Hash keyrole
data family SigningKey keyrole
data family VerificationKey keyrole
castVerificationKey :: CastVerificationKeyRole keyroleA keyroleB => VerificationKey keyroleA -> VerificationKey keyroleB
castSigningKey :: CastSigningKeyRole keyroleA keyroleB => SigningKey keyroleA -> SigningKey keyroleB
generateSigningKey :: Key keyrole => AsType keyrole -> IO (SigningKey keyrole)
generateInsecureSigningKey :: (Key keyrole, SerialiseAsRawBytes (SigningKey keyrole)) => StdGen -> AsType keyrole -> IO (SigningKey keyrole, StdGen)
data family Hash keyrole
castHash :: CastHash roleA roleB => Hash roleA -> Hash roleB
renderSafeHashAsHex :: SafeHash c tag -> Text
data () => Address addrtype
data () => ByronAddr
data () => ShelleyAddr
data () => NetworkId
Mainnet :: NetworkId
Testnet :: !NetworkMagic -> NetworkId
makeByronAddress :: NetworkId -> VerificationKey ByronKey -> Address ByronAddr
data () => ByronKey
data () => ByronKeyLegacy
makeShelleyAddress :: NetworkId -> PaymentCredential -> StakeAddressReference -> Address ShelleyAddr
data () => PaymentCredential
PaymentCredentialByKey :: Hash PaymentKey -> PaymentCredential
PaymentCredentialByScript :: ScriptHash -> PaymentCredential
newtype () => StakeAddressPointer
StakeAddressPointer :: Ptr -> StakeAddressPointer
[unStakeAddressPointer] :: StakeAddressPointer -> Ptr
data () => StakeAddressReference
StakeAddressByValue :: StakeCredential -> StakeAddressReference
StakeAddressByPointer :: StakeAddressPointer -> StakeAddressReference
NoStakeAddress :: StakeAddressReference
data () => PaymentKey
data () => PaymentExtendedKey
data () => AddressAny
AddressByron :: !Address ByronAddr -> AddressAny
AddressShelley :: !Address ShelleyAddr -> AddressAny
lexPlausibleAddressString :: Parser Text
parseAddressAny :: Parser AddressAny
data () => AddressInEra era
[AddressInEra] :: forall addrtype era. AddressTypeInEra addrtype era -> Address addrtype -> AddressInEra era
isKeyAddress :: AddressInEra era -> Bool
data () => AddressTypeInEra addrtype era
[ByronAddressInAnyEra] :: forall era. AddressTypeInEra ByronAddr era
[ShelleyAddressInEra] :: forall era. ShelleyBasedEra era -> AddressTypeInEra ShelleyAddr era
byronAddressInEra :: Address ByronAddr -> AddressInEra era
shelleyAddressInEra :: ShelleyBasedEra era -> Address ShelleyAddr -> AddressInEra era
anyAddressInShelleyBasedEra :: ShelleyBasedEra era -> AddressAny -> AddressInEra era
anyAddressInEra :: CardanoEra era -> AddressAny -> Either String (AddressInEra era)
toAddressAny :: Address addr -> AddressAny
makeByronAddressInEra :: NetworkId -> VerificationKey ByronKey -> AddressInEra era
makeShelleyAddressInEra :: ShelleyBasedEra era -> NetworkId -> PaymentCredential -> StakeAddressReference -> AddressInEra era
data () => StakeAddress
data () => StakeCredential
makeStakeAddress :: NetworkId -> StakeCredential -> StakeAddress
stakeAddressCredential :: StakeAddress -> StakeCredential
data () => StakeKey
data () => StakeExtendedKey
newtype () => Lovelace
Lovelace :: Integer -> Lovelace
newtype () => Quantity
Quantity :: Integer -> Quantity
newtype () => PolicyId
PolicyId :: ScriptHash -> PolicyId
[unPolicyId] :: PolicyId -> ScriptHash
scriptPolicyId :: Script lang -> PolicyId
newtype () => AssetName
AssetName :: ByteString -> AssetName
data () => AssetId
AdaAssetId :: AssetId
AssetId :: !PolicyId -> !AssetName -> AssetId
data () => Value
parseValue :: Parser Value
policyId :: Parser PolicyId
selectAsset :: Value -> AssetId -> Quantity
valueFromList :: [(AssetId, Quantity)] -> Value
valueToList :: Value -> [(AssetId, Quantity)]
filterValue :: (AssetId -> Bool) -> Value -> Value
negateValue :: Value -> Value
newtype () => ValueNestedRep
ValueNestedRep :: [ValueNestedBundle] -> ValueNestedRep
data () => ValueNestedBundle
ValueNestedBundleAda :: Quantity -> ValueNestedBundle
ValueNestedBundle :: PolicyId -> Map AssetName Quantity -> ValueNestedBundle
valueToNestedRep :: Value -> ValueNestedRep
valueFromNestedRep :: ValueNestedRep -> Value
renderValue :: Value -> Text
renderValuePretty :: Value -> Text
toLedgerValue :: MaryEraOnwards era -> Value -> Value (ShelleyLedgerEra era)
fromLedgerValue :: ShelleyBasedEra era -> Value (ShelleyLedgerEra era) -> Value
quantityToLovelace :: Quantity -> Lovelace
lovelaceToQuantity :: Lovelace -> Quantity
selectLovelace :: Value -> Lovelace
lovelaceToValue :: Lovelace -> Value
valueToLovelace :: Value -> Maybe Lovelace
data () => Block era
pattern Block :: BlockHeader -> [Tx era] -> Block era
data () => BlockHeader
BlockHeader :: !SlotNo -> !Hash BlockHeader -> !BlockNo -> BlockHeader
getBlockHeader :: Block era -> BlockHeader
data () => ChainPoint
ChainPointAtGenesis :: ChainPoint
ChainPoint :: !SlotNo -> !Hash BlockHeader -> ChainPoint
newtype () => EpochNo
EpochNo :: Word64 -> EpochNo
[unEpochNo] :: EpochNo -> Word64
data () => ChainTip
ChainTipAtGenesis :: ChainTip
ChainTip :: !SlotNo -> !Hash BlockHeader -> !BlockNo -> ChainTip
newtype () => BlockNo
BlockNo :: Word64 -> BlockNo
[unBlockNo] :: BlockNo -> Word64
chainTipToChainPoint :: ChainTip -> ChainPoint
data () => TxBody era
[ShelleyTxBody] :: forall era. ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> [Script (ShelleyLedgerEra era)] -> TxBodyScriptData era -> Maybe (TxAuxData (ShelleyLedgerEra era)) -> TxScriptValidity era -> TxBody era
pattern TxBody :: TxBodyContent ViewTx era -> TxBody era
createAndValidateTransactionBody :: ShelleyBasedEra era -> TxBodyContent BuildTx era -> Either TxBodyError (TxBody era)
makeByronTransactionBody :: TxIns BuildTx ByronEra -> [TxOut CtxTx ByronEra] -> Either TxBodyError (Annotated Tx ByteString)
data () => TxBodyContent build era
TxBodyContent :: TxIns build era -> TxInsCollateral era -> TxInsReference build era -> [TxOut CtxTx era] -> TxTotalCollateral era -> TxReturnCollateral CtxTx era -> TxFee era -> TxValidityLowerBound era -> TxValidityUpperBound era -> TxMetadataInEra era -> TxAuxScripts era -> TxExtraKeyWitnesses era -> BuildTxWith build (Maybe (LedgerProtocolParameters era)) -> TxWithdrawals build era -> TxCertificates build era -> TxUpdateProposal era -> TxMintValue build era -> TxScriptValidity era -> Maybe (Featured ConwayEraOnwards era (TxProposalProcedures build era)) -> Maybe (Featured ConwayEraOnwards era (TxVotingProcedures build era)) -> TxBodyContent build era
[txIns] :: TxBodyContent build era -> TxIns build era
[txInsCollateral] :: TxBodyContent build era -> TxInsCollateral era
[txInsReference] :: TxBodyContent build era -> TxInsReference build era
[txOuts] :: TxBodyContent build era -> [TxOut CtxTx era]
[txTotalCollateral] :: TxBodyContent build era -> TxTotalCollateral era
[txReturnCollateral] :: TxBodyContent build era -> TxReturnCollateral CtxTx era
[txFee] :: TxBodyContent build era -> TxFee era
[txValidityLowerBound] :: TxBodyContent build era -> TxValidityLowerBound era
[txValidityUpperBound] :: TxBodyContent build era -> TxValidityUpperBound era
[txMetadata] :: TxBodyContent build era -> TxMetadataInEra era
[txAuxScripts] :: TxBodyContent build era -> TxAuxScripts era
[txExtraKeyWits] :: TxBodyContent build era -> TxExtraKeyWitnesses era
[txProtocolParams] :: TxBodyContent build era -> BuildTxWith build (Maybe (LedgerProtocolParameters era))
[txWithdrawals] :: TxBodyContent build era -> TxWithdrawals build era
[txCertificates] :: TxBodyContent build era -> TxCertificates build era
[txUpdateProposal] :: TxBodyContent build era -> TxUpdateProposal era
[txMintValue] :: TxBodyContent build era -> TxMintValue build era
[txScriptValidity] :: TxBodyContent build era -> TxScriptValidity era
[txProposalProcedures] :: TxBodyContent build era -> Maybe (Featured ConwayEraOnwards era (TxProposalProcedures build era))
[txVotingProcedures] :: TxBodyContent build era -> Maybe (Featured ConwayEraOnwards era (TxVotingProcedures build era))
getTxBodyContent :: TxBody era -> TxBodyContent ViewTx era
defaultTxBodyContent :: ShelleyBasedEra era -> TxBodyContent BuildTx era
defaultTxFee :: ShelleyBasedEra era -> TxFee era
defaultTxValidityUpperBound :: ShelleyBasedEra era -> TxValidityUpperBound era
setTxIns :: TxIns build era -> TxBodyContent build era -> TxBodyContent build era
modTxIns :: (TxIns build era -> TxIns build era) -> TxBodyContent build era -> TxBodyContent build era
addTxIn :: (TxIn, BuildTxWith build (Witness WitCtxTxIn era)) -> TxBodyContent build era -> TxBodyContent build era
setTxInsCollateral :: TxInsCollateral era -> TxBodyContent build era -> TxBodyContent build era
setTxInsReference :: TxInsReference build era -> TxBodyContent build era -> TxBodyContent build era
setTxOuts :: [TxOut CtxTx era] -> TxBodyContent build era -> TxBodyContent build era
modTxOuts :: ([TxOut CtxTx era] -> [TxOut CtxTx era]) -> TxBodyContent build era -> TxBodyContent build era
addTxOut :: TxOut CtxTx era -> TxBodyContent build era -> TxBodyContent build era
setTxTotalCollateral :: TxTotalCollateral era -> TxBodyContent build era -> TxBodyContent build era
setTxReturnCollateral :: TxReturnCollateral CtxTx era -> TxBodyContent build era -> TxBodyContent build era
setTxFee :: TxFee era -> TxBodyContent build era -> TxBodyContent build era
setTxValidityLowerBound :: TxValidityLowerBound era -> TxBodyContent build era -> TxBodyContent build era
setTxValidityUpperBound :: TxValidityUpperBound era -> TxBodyContent build era -> TxBodyContent build era
setTxMetadata :: TxMetadataInEra era -> TxBodyContent build era -> TxBodyContent build era
setTxAuxScripts :: TxAuxScripts era -> TxBodyContent build era -> TxBodyContent build era
setTxExtraKeyWits :: TxExtraKeyWitnesses era -> TxBodyContent build era -> TxBodyContent build era
setTxProtocolParams :: BuildTxWith build (Maybe (LedgerProtocolParameters era)) -> TxBodyContent build era -> TxBodyContent build era
setTxWithdrawals :: TxWithdrawals build era -> TxBodyContent build era -> TxBodyContent build era
setTxCertificates :: TxCertificates build era -> TxBodyContent build era -> TxBodyContent build era
setTxUpdateProposal :: TxUpdateProposal era -> TxBodyContent build era -> TxBodyContent build era
setTxMintValue :: TxMintValue build era -> TxBodyContent build era -> TxBodyContent build era
setTxScriptValidity :: TxScriptValidity era -> TxBodyContent build era -> TxBodyContent build era
data () => TxBodyError
TxBodyEmptyTxIns :: TxBodyError
TxBodyEmptyTxInsCollateral :: TxBodyError
TxBodyEmptyTxOuts :: TxBodyError
TxBodyOutputNegative :: !Quantity -> !TxOutInAnyEra -> TxBodyError
TxBodyOutputOverflow :: !Quantity -> !TxOutInAnyEra -> TxBodyError
TxBodyMetadataError :: ![(Word64, TxMetadataRangeError)] -> TxBodyError
TxBodyMintAdaError :: TxBodyError
TxBodyInIxOverflow :: !TxIn -> TxBodyError
TxBodyMissingProtocolParams :: TxBodyError
TxBodyProtocolParamsConversionError :: !ProtocolParametersConversionError -> TxBodyError
data () => TxBodyScriptData era
[TxBodyNoScriptData] :: forall era. TxBodyScriptData era
[TxBodyScriptData] :: forall era. AlonzoEraOnwardsConstraints era => AlonzoEraOnwards era -> TxDats (ShelleyLedgerEra era) -> Redeemers (ShelleyLedgerEra era) -> TxBodyScriptData era
newtype () => TxId
TxId :: Hash StandardCrypto EraIndependentTxBody -> TxId
getTxId :: TxBody era -> TxId
getTxIdByron :: ATxAux ByteString -> TxId
data () => TxIn
TxIn :: TxId -> TxIx -> TxIn
type TxIns build era = [(TxIn, BuildTxWith build Witness WitCtxTxIn era)]
newtype () => TxIx
TxIx :: Word -> TxIx
renderTxIn :: TxIn -> Text
data () => CtxTx
data () => CtxUTxO
data () => TxOut ctx era
TxOut :: AddressInEra era -> TxOutValue era -> TxOutDatum ctx era -> ReferenceScript era -> TxOut ctx era
data () => TxOutValue era
[TxOutValueByron] :: forall era. Lovelace -> TxOutValue era
[TxOutValueShelleyBased] :: forall era. (Eq (Value (ShelleyLedgerEra era)), Show (Value (ShelleyLedgerEra era))) => ShelleyBasedEra era -> Value (ShelleyLedgerEra era) -> TxOutValue era
data () => TxOutInAnyEra
[TxOutInAnyEra] :: forall era. CardanoEra era -> TxOut CtxTx era -> TxOutInAnyEra
txOutInAnyEra :: CardanoEra era -> TxOut CtxTx era -> TxOutInAnyEra
txOutValueToLovelace :: TxOutValue era -> Lovelace
txOutValueToValue :: TxOutValue era -> Value
lovelaceToTxOutValue :: ShelleyBasedEra era -> Lovelace -> TxOutValue era
data () => TxOutDatum ctx era
[TxOutDatumNone] :: forall ctx era. TxOutDatum ctx era
[TxOutDatumHash] :: forall era ctx. AlonzoEraOnwards era -> Hash ScriptData -> TxOutDatum ctx era
[TxOutDatumInline] :: forall era ctx. BabbageEraOnwards era -> HashableScriptData -> TxOutDatum ctx era
pattern TxOutDatumInTx :: AlonzoEraOnwards era -> HashableScriptData -> TxOutDatum CtxTx era
parseHash :: SerialiseAsRawBytes (Hash a) => AsType (Hash a) -> Parser (Hash a)
data () => TxInsCollateral era
[TxInsCollateralNone] :: forall era. TxInsCollateral era
[TxInsCollateral] :: forall era. AlonzoEraOnwards era -> [TxIn] -> TxInsCollateral era
data () => TxInsReference build era
[TxInsReferenceNone] :: forall build era. TxInsReference build era
[TxInsReference] :: forall era build. BabbageEraOnwards era -> [TxIn] -> TxInsReference build era
data () => TxTotalCollateral era
[TxTotalCollateralNone] :: forall era. TxTotalCollateral era
[TxTotalCollateral] :: forall era. BabbageEraOnwards era -> Lovelace -> TxTotalCollateral era
data () => TxReturnCollateral ctx era
[TxReturnCollateralNone] :: forall ctx era. TxReturnCollateral ctx era
[TxReturnCollateral] :: forall era ctx. BabbageEraOnwards era -> TxOut ctx era -> TxReturnCollateral ctx era
data () => TxFee era
[TxFeeExplicit] :: forall era. ShelleyBasedEra era -> Lovelace -> TxFee era
data () => TxValidityLowerBound era
[TxValidityNoLowerBound] :: forall era. TxValidityLowerBound era
[TxValidityLowerBound] :: forall era. AllegraEraOnwards era -> SlotNo -> TxValidityLowerBound era
data () => TxValidityUpperBound era
[TxValidityUpperBound] :: forall era. ShelleyBasedEra era -> Maybe SlotNo -> TxValidityUpperBound era
newtype () => SlotNo
SlotNo :: Word64 -> SlotNo
[unSlotNo] :: SlotNo -> Word64
newtype () => EpochSlots
EpochSlots :: Word64 -> EpochSlots
[unEpochSlots] :: EpochSlots -> Word64
data () => TxMetadataInEra era
[TxMetadataNone] :: forall era. TxMetadataInEra era
[TxMetadataInEra] :: forall era. ShelleyBasedEra era -> TxMetadata -> TxMetadataInEra era
data () => TxAuxScripts era
[TxAuxScriptsNone] :: forall era. TxAuxScripts era
[TxAuxScripts] :: forall era. AllegraEraOnwards era -> [ScriptInEra era] -> TxAuxScripts era
data () => TxExtraKeyWitnesses era
[TxExtraKeyWitnessesNone] :: forall era. TxExtraKeyWitnesses era
[TxExtraKeyWitnesses] :: forall era. AlonzoEraOnwards era -> [Hash PaymentKey] -> TxExtraKeyWitnesses era
data () => TxWithdrawals build era
[TxWithdrawalsNone] :: forall build era. TxWithdrawals build era
[TxWithdrawals] :: forall era build. ShelleyBasedEra era -> [(StakeAddress, Lovelace, BuildTxWith build (Witness WitCtxStake era))] -> TxWithdrawals build era
data () => TxCertificates build era
[TxCertificatesNone] :: forall build era. TxCertificates build era
[TxCertificates] :: forall era build. ShelleyBasedEra era -> [Certificate era] -> BuildTxWith build (Map StakeCredential (Witness WitCtxStake era)) -> TxCertificates build era
data () => TxUpdateProposal era
[TxUpdateProposalNone] :: forall era. TxUpdateProposal era
[TxUpdateProposal] :: forall era. ShelleyToBabbageEra era -> UpdateProposal -> TxUpdateProposal era
data () => TxMintValue build era
[TxMintNone] :: forall build era. TxMintValue build era
[TxMintValue] :: forall era build. MaryEraOnwards era -> Value -> BuildTxWith build (Map PolicyId (ScriptWitness WitCtxMint era)) -> TxMintValue build era
data () => TxVotingProcedures build era
[TxVotingProceduresNone] :: forall build era. TxVotingProcedures build era
[TxVotingProcedures] :: forall era build. VotingProcedures (ShelleyLedgerEra era) -> BuildTxWith build (Map (Voter (EraCrypto (ShelleyLedgerEra era))) (ScriptWitness WitCtxStake era)) -> TxVotingProcedures build era
data () => TxProposalProcedures build era
[TxProposalProceduresNone] :: forall build era. TxProposalProcedures build era
[TxProposalProcedures] :: forall era build. EraPParams (ShelleyLedgerEra era) => OSet (ProposalProcedure (ShelleyLedgerEra era)) -> BuildTxWith build (Map (ProposalProcedure (ShelleyLedgerEra era)) (ScriptWitness WitCtxStake era)) -> TxProposalProcedures build era
data () => BuildTxWith build a
[ViewTx] :: forall a. BuildTxWith ViewTx a
[BuildTxWith] :: forall a. a -> BuildTxWith BuildTx a
data () => BuildTx
data () => ViewTx
newtype () => LedgerEpochInfo
LedgerEpochInfo :: EpochInfo (Either Text) -> LedgerEpochInfo
[unLedgerEpochInfo] :: LedgerEpochInfo -> EpochInfo (Either Text)
transactionFee :: ShelleyBasedEra era -> Lovelace -> Lovelace -> Tx era -> Lovelace
toLedgerEpochInfo :: EraHistory -> LedgerEpochInfo
estimateTransactionFee :: ShelleyBasedEra era -> NetworkId -> Lovelace -> Lovelace -> Tx era -> Int -> Int -> Int -> Int -> Lovelace
evaluateTransactionFee :: ShelleyBasedEra era -> PParams (ShelleyLedgerEra era) -> TxBody era -> Word -> Word -> Lovelace
estimateTransactionKeyWitnessCount :: TxBodyContent BuildTx era -> Word
calculateMinimumUTxO :: ShelleyBasedEra era -> TxOut CtxTx era -> PParams (ShelleyLedgerEra era) -> Lovelace
evaluateTransactionExecutionUnits :: CardanoEra era -> SystemStart -> LedgerEpochInfo -> LedgerProtocolParameters era -> UTxO era -> TxBody era -> Either (TransactionValidityError era) (Map ScriptWitnessIndex (Either ScriptExecutionError ExecutionUnits))
data () => ScriptExecutionError
ScriptErrorMissingTxIn :: TxIn -> ScriptExecutionError
ScriptErrorTxInWithoutDatum :: TxIn -> ScriptExecutionError
ScriptErrorWrongDatum :: Hash ScriptData -> ScriptExecutionError
ScriptErrorEvaluationFailed :: EvaluationError -> [Text] -> ScriptExecutionError
ScriptErrorExecutionUnitsOverflow :: ScriptExecutionError
ScriptErrorNotPlutusWitnessedTxIn :: ScriptWitnessIndex -> ScriptHash -> ScriptExecutionError
ScriptErrorRedeemerPointsToUnknownScriptHash :: ScriptWitnessIndex -> ScriptExecutionError
ScriptErrorMissingScript :: ScriptWitnessIndex -> ResolvablePointers -> ScriptExecutionError
ScriptErrorMissingCostModel :: Language -> ScriptExecutionError
data () => TransactionValidityError era
[TransactionValidityIntervalError] :: forall era. PastHorizonException -> TransactionValidityError era
[TransactionValidityTranslationError] :: forall era. EraPlutusContext (ShelleyLedgerEra era) => ContextError (ShelleyLedgerEra era) -> TransactionValidityError era
[TransactionValidityCostModelError] :: forall era. Map AnyPlutusScriptVersion CostModel -> String -> TransactionValidityError era
evaluateTransactionBalance :: ShelleyBasedEra era -> PParams (ShelleyLedgerEra era) -> Set PoolId -> Map StakeCredential Lovelace -> Map (Credential 'DRepRole StandardCrypto) Lovelace -> UTxO era -> TxBody era -> TxOutValue era
makeTransactionBodyAutoBalance :: ShelleyBasedEra era -> SystemStart -> LedgerEpochInfo -> LedgerProtocolParameters era -> Set PoolId -> Map StakeCredential Lovelace -> Map (Credential 'DRepRole StandardCrypto) Lovelace -> UTxO era -> TxBodyContent BuildTx era -> AddressInEra era -> Maybe Word -> Either (TxBodyErrorAutoBalance era) (BalancedTxBody era)
data () => BalancedTxBody era
BalancedTxBody :: TxBodyContent BuildTx era -> TxBody era -> TxOut CtxTx era -> Lovelace -> BalancedTxBody era
data () => TxBodyErrorAutoBalance era
TxBodyError :: TxBodyError -> TxBodyErrorAutoBalance era
TxBodyScriptExecutionError :: [(ScriptWitnessIndex, ScriptExecutionError)] -> TxBodyErrorAutoBalance era
TxBodyScriptBadScriptValidity :: TxBodyErrorAutoBalance era
TxBodyErrorAdaBalanceNegative :: Lovelace -> TxBodyErrorAutoBalance era
TxBodyErrorAdaBalanceTooSmall :: TxOutInAnyEra -> Lovelace -> Lovelace -> TxBodyErrorAutoBalance era
TxBodyErrorByronEraNotSupported :: TxBodyErrorAutoBalance era
TxBodyErrorMissingParamMinUTxO :: TxBodyErrorAutoBalance era
TxBodyErrorValidityInterval :: TransactionValidityError era -> TxBodyErrorAutoBalance era
TxBodyErrorMinUTxONotMet :: TxOutInAnyEra -> Lovelace -> TxBodyErrorAutoBalance era
TxBodyErrorNonAdaAssetsUnbalanced :: Value -> TxBodyErrorAutoBalance era
TxBodyErrorScriptWitnessIndexMissingFromExecUnitsMap :: ScriptWitnessIndex -> Map ScriptWitnessIndex ExecutionUnits -> TxBodyErrorAutoBalance era
data () => TxScriptValidity era
[TxScriptValidityNone] :: forall era. TxScriptValidity era
[TxScriptValidity] :: forall era. AlonzoEraOnwards era -> ScriptValidity -> TxScriptValidity era
data () => ScriptValidity
ScriptInvalid :: ScriptValidity
ScriptValid :: ScriptValidity
txScriptValidityToScriptValidity :: TxScriptValidity era -> ScriptValidity
data () => Tx era
pattern Tx :: TxBody era -> [KeyWitness era] -> Tx era
getTxBody :: Tx era -> TxBody era
getTxWitnesses :: Tx era -> [KeyWitness era]
signByronTransaction :: NetworkId -> Annotated Tx ByteString -> [SigningKey ByronKey] -> ATxAux ByteString
signShelleyTransaction :: ShelleyBasedEra era -> TxBody era -> [ShelleyWitnessSigningKey] -> Tx era
makeSignedByronTransaction :: [KeyWitness era] -> Annotated Tx ByteString -> ATxAux ByteString
makeSignedTransaction :: [KeyWitness era] -> TxBody era -> Tx era
data () => KeyWitness era
makeByronKeyWitness :: IsByronKey key => NetworkId -> Annotated Tx ByteString -> SigningKey key -> KeyWitness ByronEra
data () => ShelleyWitnessSigningKey
WitnessPaymentKey :: SigningKey PaymentKey -> ShelleyWitnessSigningKey
WitnessPaymentExtendedKey :: SigningKey PaymentExtendedKey -> ShelleyWitnessSigningKey
WitnessStakeKey :: SigningKey StakeKey -> ShelleyWitnessSigningKey
WitnessStakeExtendedKey :: SigningKey StakeExtendedKey -> ShelleyWitnessSigningKey
WitnessStakePoolKey :: SigningKey StakePoolKey -> ShelleyWitnessSigningKey
WitnessGenesisKey :: SigningKey GenesisKey -> ShelleyWitnessSigningKey
WitnessGenesisExtendedKey :: SigningKey GenesisExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateKey :: SigningKey GenesisDelegateKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateExtendedKey :: SigningKey GenesisDelegateExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisUTxOKey :: SigningKey GenesisUTxOKey -> ShelleyWitnessSigningKey
WitnessCommitteeColdKey :: SigningKey CommitteeColdKey -> ShelleyWitnessSigningKey
WitnessCommitteeColdExtendedKey :: SigningKey CommitteeColdExtendedKey -> ShelleyWitnessSigningKey
WitnessCommitteeHotKey :: SigningKey CommitteeHotKey -> ShelleyWitnessSigningKey
WitnessCommitteeHotExtendedKey :: SigningKey CommitteeHotExtendedKey -> ShelleyWitnessSigningKey
WitnessDRepKey :: SigningKey DRepKey -> ShelleyWitnessSigningKey
WitnessDRepExtendedKey :: SigningKey DRepExtendedKey -> ShelleyWitnessSigningKey
makeShelleyKeyWitness :: ShelleyBasedEra era -> TxBody era -> ShelleyWitnessSigningKey -> KeyWitness era
makeShelleyBootstrapWitness :: ShelleyBasedEra era -> WitnessNetworkIdOrByronAddress -> TxBody era -> SigningKey ByronKey -> KeyWitness era
newtype () => TxMetadata
TxMetadata :: Map Word64 TxMetadataValue -> TxMetadata
class () => AsTxMetadata a
asTxMetadata :: AsTxMetadata a => a -> TxMetadata
data () => TxMetadataValue
TxMetaMap :: [(TxMetadataValue, TxMetadataValue)] -> TxMetadataValue
TxMetaList :: [TxMetadataValue] -> TxMetadataValue
TxMetaNumber :: Integer -> TxMetadataValue
TxMetaBytes :: ByteString -> TxMetadataValue
TxMetaText :: Text -> TxMetadataValue
makeTransactionMetadata :: Map Word64 TxMetadataValue -> TxMetadata
mergeTransactionMetadata :: (TxMetadataValue -> TxMetadataValue -> TxMetadataValue) -> TxMetadata -> TxMetadata -> TxMetadata
metaTextChunks :: Text -> TxMetadataValue
metaBytesChunks :: ByteString -> TxMetadataValue
validateTxMetadata :: TxMetadata -> Either [(Word64, TxMetadataRangeError)] ()
data () => TxMetadataRangeError
TxMetadataNumberOutOfRange :: !Integer -> TxMetadataRangeError
TxMetadataTextTooLong :: !Int -> TxMetadataRangeError
TxMetadataBytesTooLong :: !Int -> TxMetadataRangeError
data () => TxMetadataJsonSchema
TxMetadataJsonNoSchema :: TxMetadataJsonSchema
TxMetadataJsonDetailedSchema :: TxMetadataJsonSchema
metadataFromJson :: TxMetadataJsonSchema -> Value -> Either TxMetadataJsonError TxMetadata
metadataToJson :: TxMetadataJsonSchema -> TxMetadata -> Value
metadataValueToJsonNoSchema :: TxMetadataValue -> Value
data () => TxMetadataJsonError
TxMetadataJsonToplevelNotMap :: TxMetadataJsonError
TxMetadataJsonToplevelBadKey :: !Text -> TxMetadataJsonError
TxMetadataJsonSchemaError :: !Word64 -> !Value -> !TxMetadataJsonSchemaError -> TxMetadataJsonError
TxMetadataRangeError :: !Word64 -> !Value -> !TxMetadataRangeError -> TxMetadataJsonError
data () => TxMetadataJsonSchemaError
TxMetadataJsonNullNotAllowed :: TxMetadataJsonSchemaError
TxMetadataJsonBoolNotAllowed :: TxMetadataJsonSchemaError
TxMetadataJsonNumberNotInteger :: !Double -> TxMetadataJsonSchemaError
TxMetadataJsonNotObject :: !Value -> TxMetadataJsonSchemaError
TxMetadataJsonBadObject :: ![(Text, Value)] -> TxMetadataJsonSchemaError
TxMetadataJsonBadMapPair :: !Value -> TxMetadataJsonSchemaError
TxMetadataJsonTypeMismatch :: !Text -> !Value -> TxMetadataJsonSchemaError
data () => Certificate era
[ShelleyRelatedCertificate] :: forall era. ShelleyToBabbageEra era -> ShelleyTxCert (ShelleyLedgerEra era) -> Certificate era
[ConwayCertificate] :: forall era. ConwayEraOnwards era -> ConwayTxCert (ShelleyLedgerEra era) -> Certificate era
data () => StakeAddressRequirements era
[StakeAddrRegistrationConway] :: forall era. ConwayEraOnwards era -> Lovelace -> StakeCredential -> StakeAddressRequirements era
[StakeAddrRegistrationPreConway] :: forall era. ShelleyToBabbageEra era -> StakeCredential -> StakeAddressRequirements era
data () => StakeDelegationRequirements era
[StakeDelegationRequirementsConwayOnwards] :: forall era. ConwayEraOnwards era -> StakeCredential -> Delegatee (EraCrypto (ShelleyLedgerEra era)) -> StakeDelegationRequirements era
[StakeDelegationRequirementsPreConway] :: forall era. ShelleyToBabbageEra era -> StakeCredential -> PoolId -> StakeDelegationRequirements era
makeStakeAddressDelegationCertificate :: StakeDelegationRequirements era -> Certificate era
makeStakeAddressRegistrationCertificate :: StakeAddressRequirements era -> Certificate era
makeStakeAddressUnregistrationCertificate :: StakeAddressRequirements era -> Certificate era
makeStakeAddressAndDRepDelegationCertificate :: ConwayEraOnwards era -> StakeCredential -> Delegatee (EraCrypto (ShelleyLedgerEra era)) -> Lovelace -> Certificate era
data () => StakePoolRegistrationRequirements era
[StakePoolRegistrationRequirementsConwayOnwards] :: forall era. ConwayEraOnwards era -> PoolParams (EraCrypto (ShelleyLedgerEra era)) -> StakePoolRegistrationRequirements era
[StakePoolRegistrationRequirementsPreConway] :: forall era. ShelleyToBabbageEra era -> PoolParams (EraCrypto (ShelleyLedgerEra era)) -> StakePoolRegistrationRequirements era
data () => StakePoolRetirementRequirements era
[StakePoolRetirementRequirementsConwayOnwards] :: forall era. ConwayEraOnwards era -> PoolId -> EpochNo -> StakePoolRetirementRequirements era
[StakePoolRetirementRequirementsPreConway] :: forall era. ShelleyToBabbageEra era -> PoolId -> EpochNo -> StakePoolRetirementRequirements era
makeStakePoolRegistrationCertificate :: StakePoolRegistrationRequirements era -> Certificate era
makeStakePoolRetirementCertificate :: StakePoolRetirementRequirements era -> Certificate era
data () => StakePoolParameters
data () => StakePoolRelay
data () => StakePoolMetadataReference
newtype () => DelegationsAndRewards
DelegationsAndRewards :: (Map StakeAddress Lovelace, Map StakeAddress PoolId) -> DelegationsAndRewards
mergeDelegsAndRewards :: DelegationsAndRewards -> [(StakeAddress, Maybe Lovelace, Maybe PoolId)]
data () => StakePoolMetadata
validateAndHashStakePoolMetadata :: ByteString -> Either StakePoolMetadataValidationError (StakePoolMetadata, Hash StakePoolMetadata)
data () => StakePoolMetadataValidationError
StakePoolMetadataJsonDecodeError :: !String -> StakePoolMetadataValidationError
StakePoolMetadataInvalidLengthError :: !Int -> !Int -> StakePoolMetadataValidationError
data () => SimpleScript'
data () => PlutusScriptV1
data () => PlutusScriptV2
data () => PlutusScriptV3
data () => ScriptLanguage lang
[SimpleScriptLanguage] :: ScriptLanguage SimpleScript'
[PlutusScriptLanguage] :: forall lang. PlutusScriptVersion lang -> ScriptLanguage lang
data () => PlutusScriptVersion lang
[PlutusScriptV1] :: PlutusScriptVersion PlutusScriptV1
[PlutusScriptV2] :: PlutusScriptVersion PlutusScriptV2
[PlutusScriptV3] :: PlutusScriptVersion PlutusScriptV3
data () => AnyScriptLanguage
[AnyScriptLanguage] :: forall lang. ScriptLanguage lang -> AnyScriptLanguage
data () => AnyPlutusScriptVersion
[AnyPlutusScriptVersion] :: forall lang. PlutusScriptVersion lang -> AnyPlutusScriptVersion
class IsScriptLanguage lang => IsPlutusScriptLanguage lang
plutusScriptVersion :: IsPlutusScriptLanguage lang => PlutusScriptVersion lang
class HasTypeProxy lang => IsScriptLanguage lang
scriptLanguage :: IsScriptLanguage lang => ScriptLanguage lang
data () => Script lang
[SimpleScript] :: !SimpleScript -> Script SimpleScript'
[PlutusScript] :: forall lang. !PlutusScriptVersion lang -> !PlutusScript lang -> Script lang
data () => ScriptInAnyLang
[ScriptInAnyLang] :: forall lang. ScriptLanguage lang -> Script lang -> ScriptInAnyLang
toScriptInAnyLang :: Script lang -> ScriptInAnyLang
data () => ScriptInEra era
[ScriptInEra] :: forall lang era. ScriptLanguageInEra lang era -> Script lang -> ScriptInEra era
toScriptInEra :: ShelleyBasedEra era -> ScriptInAnyLang -> Maybe (ScriptInEra era)
eraOfScriptInEra :: ScriptInEra era -> ShelleyBasedEra era
data () => WitCtxTxIn
data () => WitCtxMint
data () => WitCtxStake
data () => WitCtx witctx
[WitCtxTxIn] :: WitCtx WitCtxTxIn
[WitCtxMint] :: WitCtx WitCtxMint
[WitCtxStake] :: WitCtx WitCtxStake
data () => ScriptWitness witctx era
[SimpleScriptWitness] :: forall era witctx. ScriptLanguageInEra SimpleScript' era -> SimpleScriptOrReferenceInput SimpleScript' -> ScriptWitness witctx era
[PlutusScriptWitness] :: forall lang era witctx. ScriptLanguageInEra lang era -> PlutusScriptVersion lang -> PlutusScriptOrReferenceInput lang -> ScriptDatum witctx -> ScriptRedeemer -> ExecutionUnits -> ScriptWitness witctx era
data () => Witness witctx era
[KeyWitness] :: forall witctx era. KeyWitnessInCtx witctx -> Witness witctx era
[ScriptWitness] :: forall witctx era. ScriptWitnessInCtx witctx -> ScriptWitness witctx era -> Witness witctx era
data () => KeyWitnessInCtx witctx
[KeyWitnessForSpending] :: KeyWitnessInCtx WitCtxTxIn
[KeyWitnessForStakeAddr] :: KeyWitnessInCtx WitCtxStake
data () => ScriptWitnessInCtx witctx
[ScriptWitnessForSpending] :: ScriptWitnessInCtx WitCtxTxIn
[ScriptWitnessForMinting] :: ScriptWitnessInCtx WitCtxMint
[ScriptWitnessForStakeAddr] :: ScriptWitnessInCtx WitCtxStake
class () => IsScriptWitnessInCtx ctx
scriptWitnessInCtx :: IsScriptWitnessInCtx ctx => ScriptWitnessInCtx ctx
data () => ScriptDatum witctx
[ScriptDatumForTxIn] :: HashableScriptData -> ScriptDatum WitCtxTxIn
[InlineScriptDatum] :: ScriptDatum WitCtxTxIn
[NoScriptDatumForMint] :: ScriptDatum WitCtxMint
[NoScriptDatumForStake] :: ScriptDatum WitCtxStake
type ScriptRedeemer = HashableScriptData
scriptWitnessScript :: ScriptWitness witctx era -> Maybe (ScriptInEra era)
data () => AnyScriptWitness era
[AnyScriptWitness] :: forall witctx era. ScriptWitness witctx era -> AnyScriptWitness era
data () => ScriptWitnessIndex
ScriptWitnessIndexTxIn :: !Word32 -> ScriptWitnessIndex
ScriptWitnessIndexMint :: !Word32 -> ScriptWitnessIndex
ScriptWitnessIndexCertificate :: !Word32 -> ScriptWitnessIndex
ScriptWitnessIndexWithdrawal :: !Word32 -> ScriptWitnessIndex
ScriptWitnessIndexVoting :: !Word32 -> ScriptWitnessIndex
ScriptWitnessIndexProposing :: !Word32 -> ScriptWitnessIndex
renderScriptWitnessIndex :: ScriptWitnessIndex -> String
collectTxBodyScriptWitnesses :: ShelleyBasedEra era -> TxBodyContent BuildTx era -> [(ScriptWitnessIndex, AnyScriptWitness era)]
mapTxScriptWitnesses :: (forall witctx. () => ScriptWitnessIndex -> ScriptWitness witctx era -> Either (TxBodyErrorAutoBalance era) (ScriptWitness witctx era)) -> TxBodyContent BuildTx era -> Either (TxBodyErrorAutoBalance era) (TxBodyContent BuildTx era)
data () => ScriptLanguageInEra lang era
[SimpleScriptInShelley] :: ScriptLanguageInEra SimpleScript' ShelleyEra
[SimpleScriptInAllegra] :: ScriptLanguageInEra SimpleScript' AllegraEra
[SimpleScriptInMary] :: ScriptLanguageInEra SimpleScript' MaryEra
[SimpleScriptInAlonzo] :: ScriptLanguageInEra SimpleScript' AlonzoEra
[SimpleScriptInBabbage] :: ScriptLanguageInEra SimpleScript' BabbageEra
[SimpleScriptInConway] :: ScriptLanguageInEra SimpleScript' ConwayEra
[PlutusScriptV1InAlonzo] :: ScriptLanguageInEra PlutusScriptV1 AlonzoEra
[PlutusScriptV1InBabbage] :: ScriptLanguageInEra PlutusScriptV1 BabbageEra
[PlutusScriptV1InConway] :: ScriptLanguageInEra PlutusScriptV1 ConwayEra
[PlutusScriptV2InBabbage] :: ScriptLanguageInEra PlutusScriptV2 BabbageEra
[PlutusScriptV2InConway] :: ScriptLanguageInEra PlutusScriptV2 ConwayEra
[PlutusScriptV3InConway] :: ScriptLanguageInEra PlutusScriptV3 ConwayEra
scriptLanguageSupportedInEra :: ShelleyBasedEra era -> ScriptLanguage lang -> Maybe (ScriptLanguageInEra lang era)
languageOfScriptLanguageInEra :: ScriptLanguageInEra lang era -> ScriptLanguage lang
eraOfScriptLanguageInEra :: ScriptLanguageInEra lang era -> ShelleyBasedEra era
data () => SimpleScript
RequireSignature :: !Hash PaymentKey -> SimpleScript
RequireTimeBefore :: !SlotNo -> SimpleScript
RequireTimeAfter :: !SlotNo -> SimpleScript
RequireAllOf :: ![SimpleScript] -> SimpleScript
RequireAnyOf :: ![SimpleScript] -> SimpleScript
RequireMOf :: !Int -> ![SimpleScript] -> SimpleScript
data () => PlutusScript lang
examplePlutusScriptAlwaysSucceeds :: WitCtx witctx -> PlutusScript PlutusScriptV1
examplePlutusScriptAlwaysFails :: WitCtx witctx -> PlutusScript PlutusScriptV1
data () => HashableScriptData
hashScriptDataBytes :: HashableScriptData -> Hash ScriptData
getOriginalScriptDataBytes :: HashableScriptData -> ByteString
getScriptData :: HashableScriptData -> ScriptData
unsafeHashableScriptData :: ScriptData -> HashableScriptData
data () => ScriptData
ScriptDataConstructor :: Integer -> [ScriptData] -> ScriptData
ScriptDataMap :: [(ScriptData, ScriptData)] -> ScriptData
ScriptDataList :: [ScriptData] -> ScriptData
ScriptDataNumber :: Integer -> ScriptData
ScriptDataBytes :: ByteString -> ScriptData
newtype () => ScriptDataRangeError
ScriptDataConstructorOutOfRange :: Integer -> ScriptDataRangeError
validateScriptData :: ScriptData -> Either ScriptDataRangeError ()
data () => ScriptDataJsonSchema
ScriptDataJsonNoSchema :: ScriptDataJsonSchema
ScriptDataJsonDetailedSchema :: ScriptDataJsonSchema
scriptDataFromJson :: ScriptDataJsonSchema -> Value -> Either ScriptDataJsonError HashableScriptData
scriptDataToJson :: ScriptDataJsonSchema -> HashableScriptData -> Value
data () => ScriptDataJsonError
ScriptDataJsonSchemaError :: !Value -> !ScriptDataJsonSchemaError -> ScriptDataJsonError
ScriptDataRangeError :: !Value -> !ScriptDataRangeError -> ScriptDataJsonError
data () => ScriptDataJsonSchemaError
ScriptDataJsonNullNotAllowed :: ScriptDataJsonSchemaError
ScriptDataJsonBoolNotAllowed :: ScriptDataJsonSchemaError
ScriptDataJsonNumberNotInteger :: !Double -> ScriptDataJsonSchemaError
ScriptDataJsonNotObject :: !Value -> ScriptDataJsonSchemaError
ScriptDataJsonBadObject :: ![(Text, Value)] -> ScriptDataJsonSchemaError
ScriptDataJsonBadMapPair :: !Value -> ScriptDataJsonSchemaError
ScriptDataJsonTypeMismatch :: !Text -> !Value -> ScriptDataJsonSchemaError
data () => ScriptDataJsonBytesError
ScriptDataJsonBytesErrorValue :: ScriptDataJsonError -> ScriptDataJsonBytesError
ScriptDataJsonBytesErrorInvalid :: ScriptDataRangeError -> ScriptDataJsonBytesError
scriptDataJsonToHashable :: ScriptDataJsonSchema -> Value -> Either ScriptDataJsonBytesError HashableScriptData
data () => ExecutionUnits
ExecutionUnits :: Natural -> Natural -> ExecutionUnits
[executionSteps] :: ExecutionUnits -> Natural
[executionMemory] :: ExecutionUnits -> Natural
data () => ExecutionUnitPrices
ExecutionUnitPrices :: Rational -> Rational -> ExecutionUnitPrices
[priceExecutionSteps] :: ExecutionUnitPrices -> Rational
[priceExecutionMemory] :: ExecutionUnitPrices -> Rational
newtype () => CostModel
CostModel :: [Integer] -> CostModel
toAlonzoCostModel :: CostModel -> Language -> Either ProtocolParametersConversionError CostModel
fromAlonzoCostModel :: CostModel -> CostModel
toAlonzoCostModels :: Map AnyPlutusScriptVersion CostModel -> Either ProtocolParametersConversionError CostModels
newtype () => ScriptHash
ScriptHash :: ScriptHash StandardCrypto -> ScriptHash
hashScript :: Script lang -> ScriptHash
data () => InputFormat a
[InputFormatBech32] :: forall a. SerialiseAsBech32 a => InputFormat a
[InputFormatHex] :: forall a. SerialiseAsRawBytes a => InputFormat a
[InputFormatTextEnvelope] :: forall a. HasTextEnvelope a => InputFormat a
data () => InputDecodeError
InputTextEnvelopeError :: !TextEnvelopeError -> InputDecodeError
InputBech32DecodeError :: !Bech32DecodeError -> InputDecodeError
InputInvalidError :: InputDecodeError
deserialiseInput :: AsType a -> NonEmpty (InputFormat a) -> ByteString -> Either InputDecodeError a
deserialiseInputAnyOf :: [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> ByteString -> Either InputDecodeError b
renderInputDecodeError :: InputDecodeError -> Doc ann
data () => SomeAddressVerificationKey
AByronVerificationKey :: VerificationKey ByronKey -> SomeAddressVerificationKey
APaymentVerificationKey :: VerificationKey PaymentKey -> SomeAddressVerificationKey
APaymentExtendedVerificationKey :: VerificationKey PaymentExtendedKey -> SomeAddressVerificationKey
AGenesisUTxOVerificationKey :: VerificationKey GenesisUTxOKey -> SomeAddressVerificationKey
AGenesisExtendedVerificationKey :: VerificationKey GenesisExtendedKey -> SomeAddressVerificationKey
AGenesisDelegateExtendedVerificationKey :: VerificationKey GenesisDelegateExtendedKey -> SomeAddressVerificationKey
AKesVerificationKey :: VerificationKey KesKey -> SomeAddressVerificationKey
AVrfVerificationKey :: VerificationKey VrfKey -> SomeAddressVerificationKey
AStakeVerificationKey :: VerificationKey StakeKey -> SomeAddressVerificationKey
AStakeExtendedVerificationKey :: VerificationKey StakeExtendedKey -> SomeAddressVerificationKey
ADRepVerificationKey :: VerificationKey DRepKey -> SomeAddressVerificationKey
ADRepExtendedVerificationKey :: VerificationKey DRepExtendedKey -> SomeAddressVerificationKey
deserialiseAnyVerificationKey :: ByteString -> Either InputDecodeError SomeAddressVerificationKey
deserialiseAnyVerificationKeyBech32 :: ByteString -> Either Bech32DecodeError SomeAddressVerificationKey
deserialiseAnyVerificationKeyTextEnvelope :: ByteString -> Either TextEnvelopeError SomeAddressVerificationKey
renderSomeAddressVerificationKey :: SomeAddressVerificationKey -> Text
mapSomeAddressVerificationKey :: (forall keyrole. Key keyrole => VerificationKey keyrole -> a) -> SomeAddressVerificationKey -> a
class HasTypeProxy a => SerialiseAsCBOR a
class Typeable a => ToCBOR a
class Typeable a => FromCBOR a
serialiseToCBOR :: SerialiseAsCBOR a => a -> ByteString
deserialiseFromCBOR :: SerialiseAsCBOR a => AsType a -> ByteString -> Either DecoderError a
class () => ToJSON a
class () => FromJSON a
serialiseToJSON :: ToJSON a => a -> ByteString
deserialiseFromJSON :: FromJSON a => AsType a -> ByteString -> Either JsonDecodeError a
newtype () => JsonDecodeError
JsonDecodeError :: String -> JsonDecodeError
readFileJSON :: FromJSON a => AsType a -> FilePath -> IO (Either (FileError JsonDecodeError) a)
writeFileJSON :: ToJSON a => FilePath -> a -> IO (Either (FileError ()) ())
prettyPrintJSON :: ToJSON a => a -> ByteString
class (HasTypeProxy a, SerialiseAsRawBytes a) => SerialiseAsBech32 a
serialiseToBech32 :: SerialiseAsBech32 a => a -> Text
deserialiseFromBech32 :: SerialiseAsBech32 a => AsType a -> Text -> Either Bech32DecodeError a
deserialiseAnyOfFromBech32 :: [FromSomeType SerialiseAsBech32 b] -> Text -> Either Bech32DecodeError b
data () => Bech32DecodeError
Bech32DecodingError :: !DecodingError -> Bech32DecodeError
Bech32UnexpectedPrefix :: !Text -> !Set Text -> Bech32DecodeError
Bech32DataPartToBytesError :: !Text -> Bech32DecodeError
Bech32DeserialiseFromBytesError :: !ByteString -> Bech32DecodeError
Bech32WrongPrefix :: !Text -> !Text -> Bech32DecodeError
newtype () => UsingBech32 a
UsingBech32 :: a -> UsingBech32 a
class HasTypeProxy addr => SerialiseAddress addr
serialiseAddress :: SerialiseAddress addr => addr -> Text
deserialiseAddress :: SerialiseAddress addr => AsType addr -> Text -> Maybe addr
class (HasTypeProxy a, Typeable a) => SerialiseAsRawBytes a
serialiseToRawBytes :: SerialiseAsRawBytes a => a -> ByteString
deserialiseFromRawBytes :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either SerialiseAsRawBytesError a
newtype () => SerialiseAsRawBytesError
SerialiseAsRawBytesError :: String -> SerialiseAsRawBytesError
[unSerialiseAsRawBytesError] :: SerialiseAsRawBytesError -> String
serialiseToRawBytesHex :: SerialiseAsRawBytes a => a -> ByteString
deserialiseFromRawBytesHex :: SerialiseAsRawBytes a => AsType a -> ByteString -> Either RawBytesHexError a
serialiseToRawBytesHexText :: SerialiseAsRawBytes a => a -> Text
data () => RawBytesHexError
RawBytesHexErrorBase16DecodeFail :: ByteString -> String -> RawBytesHexError
RawBytesHexErrorRawBytesDecodeFail :: ByteString -> TypeRep -> SerialiseAsRawBytesError -> RawBytesHexError
newtype () => UsingRawBytes a
UsingRawBytes :: a -> UsingRawBytes a
newtype () => UsingRawBytesHex a
UsingRawBytesHex :: a -> UsingRawBytesHex a
class SerialiseAsCBOR a => HasTextEnvelope a
textEnvelopeType :: HasTextEnvelope a => AsType a -> TextEnvelopeType
textEnvelopeDefaultDescr :: HasTextEnvelope a => a -> TextEnvelopeDescr
data () => TextEnvelope
TextEnvelope :: !TextEnvelopeType -> !TextEnvelopeDescr -> !ByteString -> TextEnvelope
[teType] :: TextEnvelope -> !TextEnvelopeType
[teDescription] :: TextEnvelope -> !TextEnvelopeDescr
[teRawCBOR] :: TextEnvelope -> !ByteString
newtype () => TextEnvelopeType
TextEnvelopeType :: String -> TextEnvelopeType
data () => TextEnvelopeDescr
data () => TextEnvelopeError
TextEnvelopeTypeError :: ![TextEnvelopeType] -> !TextEnvelopeType -> TextEnvelopeError
TextEnvelopeDecodeError :: !DecoderError -> TextEnvelopeError
TextEnvelopeAesonDecodeError :: !String -> TextEnvelopeError
textEnvelopeTypeInEra :: HasTextEnvelope (f era) => CardanoEra era -> AsType (f era) -> TextEnvelopeType
textEnvelopeRawCBOR :: TextEnvelope -> ByteString
textEnvelopeToJSON :: HasTextEnvelope a => Maybe TextEnvelopeDescr -> a -> ByteString
serialiseToTextEnvelope :: HasTextEnvelope a => Maybe TextEnvelopeDescr -> a -> TextEnvelope
deserialiseFromTextEnvelope :: HasTextEnvelope a => AsType a -> TextEnvelope -> Either TextEnvelopeError a
readFileTextEnvelope :: HasTextEnvelope a => AsType a -> File content 'In -> IO (Either (FileError TextEnvelopeError) a)
writeFileTextEnvelope :: HasTextEnvelope a => File content 'Out -> Maybe TextEnvelopeDescr -> a -> IO (Either (FileError ()) ())
readTextEnvelopeFromFile :: FilePath -> IO (Either (FileError TextEnvelopeError) TextEnvelope)
readTextEnvelopeOfTypeFromFile :: TextEnvelopeType -> FilePath -> IO (Either (FileError TextEnvelopeError) TextEnvelope)
data () => FromSomeTypeCDDL c b
[FromCDDLTx] :: forall b. Text -> (InAnyShelleyBasedEra Tx -> b) -> FromSomeTypeCDDL TextEnvelopeCddl b
[FromCDDLWitness] :: forall b. Text -> (InAnyShelleyBasedEra KeyWitness -> b) -> FromSomeTypeCDDL TextEnvelopeCddl b
readFileTextEnvelopeCddlAnyOf :: [FromSomeTypeCDDL TextEnvelopeCddl b] -> FilePath -> IO (Either (FileError TextEnvelopeCddlError) b)
deserialiseFromTextEnvelopeCddlAnyOf :: [FromSomeTypeCDDL TextEnvelopeCddl b] -> TextEnvelopeCddl -> Either TextEnvelopeCddlError b
writeTxFileTextEnvelopeCddl :: ShelleyBasedEra era -> File content 'Out -> Tx era -> IO (Either (FileError ()) ())
writeTxWitnessFileTextEnvelopeCddl :: ShelleyBasedEra era -> File () 'Out -> KeyWitness era -> IO (Either (FileError ()) ())
serialiseTxLedgerCddl :: ShelleyBasedEra era -> Tx era -> TextEnvelopeCddl
deserialiseTxLedgerCddl :: ShelleyBasedEra era -> TextEnvelopeCddl -> Either TextEnvelopeCddlError (Tx era)
deserialiseByronTxCddl :: TextEnvelopeCddl -> Either TextEnvelopeCddlError (ATxAux ByteString)
serialiseWitnessLedgerCddl :: ShelleyBasedEra era -> KeyWitness era -> TextEnvelopeCddl
deserialiseWitnessLedgerCddl :: ShelleyBasedEra era -> TextEnvelopeCddl -> Either TextEnvelopeCddlError (KeyWitness era)
data () => TextEnvelopeCddl
TextEnvelopeCddl :: !Text -> !Text -> !ByteString -> TextEnvelopeCddl
[teCddlType] :: TextEnvelopeCddl -> !Text
[teCddlDescription] :: TextEnvelopeCddl -> !Text
[teCddlRawCBOR] :: TextEnvelopeCddl -> !ByteString
data () => TextEnvelopeCddlError
TextEnvelopeCddlErrCBORDecodingError :: DecoderError -> TextEnvelopeCddlError
TextEnvelopeCddlAesonDecodeError :: FilePath -> String -> TextEnvelopeCddlError
TextEnvelopeCddlUnknownKeyWitness :: TextEnvelopeCddlError
TextEnvelopeCddlTypeError :: [Text] -> Text -> TextEnvelopeCddlError
TextEnvelopeCddlErrUnknownType :: Text -> TextEnvelopeCddlError
TextEnvelopeCddlErrByronKeyWitnessUnsupported :: TextEnvelopeCddlError
readKeyFile :: AsType a -> NonEmpty (InputFormat a) -> FilePath -> IO (Either (FileError InputDecodeError) a)
readKeyFileTextEnvelope :: HasTextEnvelope a => AsType a -> File content 'In -> IO (Either (FileError InputDecodeError) a)
readKeyFileAnyOf :: forall content b. [FromSomeType SerialiseAsBech32 b] -> [FromSomeType HasTextEnvelope b] -> File content 'In -> IO (Either (FileError InputDecodeError) b)
data () => FromSomeType (c :: Type -> Constraint) b
[FromSomeType] :: forall (c :: Type -> Constraint) a b. c a => AsType a -> (a -> b) -> FromSomeType c b
deserialiseFromTextEnvelopeAnyOf :: [FromSomeType HasTextEnvelope b] -> TextEnvelope -> Either TextEnvelopeError b
readFileTextEnvelopeAnyOf :: [FromSomeType HasTextEnvelope b] -> File content 'In -> IO (Either (FileError TextEnvelopeError) b)
class () => Error e
prettyError :: Error e => e -> Doc ann
throwErrorAsException :: Error e => e -> IO a
data () => FileError e
FileError :: FilePath -> e -> FileError e
FileErrorTempFile :: FilePath -> FilePath -> Handle -> FileError e
FileDoesNotExistError :: FilePath -> FileError e
FileIOError :: FilePath -> IOException -> FileError e
data () => NodeConfig
NodeConfig :: !Maybe Double -> !File ByronGenesisConfig 'In -> !GenesisHashByron -> !File ShelleyGenesisConfig 'In -> !GenesisHashShelley -> !File AlonzoGenesis 'In -> !GenesisHashAlonzo -> !File ConwayGenesisConfig 'In -> !GenesisHashConway -> !RequiresNetworkMagic -> !ProtocolVersion -> !CardanoHardForkTriggers -> NodeConfig
[ncPBftSignatureThreshold] :: NodeConfig -> !Maybe Double
[ncByronGenesisFile] :: NodeConfig -> !File ByronGenesisConfig 'In
[ncByronGenesisHash] :: NodeConfig -> !GenesisHashByron
[ncShelleyGenesisFile] :: NodeConfig -> !File ShelleyGenesisConfig 'In
[ncShelleyGenesisHash] :: NodeConfig -> !GenesisHashShelley
[ncAlonzoGenesisFile] :: NodeConfig -> !File AlonzoGenesis 'In
[ncAlonzoGenesisHash] :: NodeConfig -> !GenesisHashAlonzo
[ncConwayGenesisFile] :: NodeConfig -> !File ConwayGenesisConfig 'In
[ncConwayGenesisHash] :: NodeConfig -> !GenesisHashConway
[ncRequiresNetworkMagic] :: NodeConfig -> !RequiresNetworkMagic
[ncByronProtocolVersion] :: NodeConfig -> !ProtocolVersion
[ncHardForkTriggers] :: NodeConfig -> !CardanoHardForkTriggers
type NodeConfigFile = File NodeConfig
readNodeConfig :: (MonadError Text m, MonadIO m) => NodeConfigFile 'In -> m NodeConfig
type ByronGenesisFile = File ByronGenesisConfig
type ShelleyGenesisFile = File ShelleyGenesisConfig
type AlonzoGenesisFile = File AlonzoGenesisConfig
type ConwayGenesisFile = File ConwayGenesisConfig
data () => GenesisConfig
GenesisCardano :: !NodeConfig -> !Config -> !GenesisHashShelley -> !TransitionConfig (LatestKnownEra StandardCrypto) -> GenesisConfig
readCardanoGenesisConfig :: forall t (m :: Type -> Type). MonadIOTransError GenesisConfigError t m => NodeConfig -> t m GenesisConfig
mkProtocolInfoCardano :: GenesisConfig -> (ProtocolInfo (HardForkBlock (CardanoEras StandardCrypto)), IO [BlockForging IO (HardForkBlock (CardanoEras StandardCrypto))])
readByronGenesisConfig :: forall t (m :: Type -> Type). MonadIOTransError GenesisConfigError t m => NodeConfig -> t m Config
data () => ShelleyConfig
ShelleyConfig :: !ShelleyGenesis StandardCrypto -> !GenesisHashShelley -> ShelleyConfig
[scConfig] :: ShelleyConfig -> !ShelleyGenesis StandardCrypto
[scGenesisHash] :: ShelleyConfig -> !GenesisHashShelley
newtype () => GenesisHashShelley
GenesisHashShelley :: Hash Blake2b_256 ByteString -> GenesisHashShelley
[unGenesisHashShelley] :: GenesisHashShelley -> Hash Blake2b_256 ByteString
readShelleyGenesisConfig :: forall t (m :: Type -> Type). MonadIOTransError GenesisConfigError t m => NodeConfig -> t m ShelleyConfig
shelleyPraosNonce :: GenesisHashShelley -> Nonce
newtype () => GenesisHashAlonzo
GenesisHashAlonzo :: Hash Blake2b_256 ByteString -> GenesisHashAlonzo
[unGenesisHashAlonzo] :: GenesisHashAlonzo -> Hash Blake2b_256 ByteString
readAlonzoGenesisConfig :: forall t (m :: Type -> Type). MonadIOTransError GenesisConfigError t m => NodeConfig -> t m AlonzoGenesis
newtype () => GenesisHashConway
GenesisHashConway :: Hash Blake2b_256 ByteString -> GenesisHashConway
[unGenesisHashConway] :: GenesisHashConway -> Hash Blake2b_256 ByteString
readConwayGenesisConfig :: forall t (m :: Type -> Type). MonadIOTransError GenesisConfigError t m => NodeConfig -> t m (ConwayGenesis StandardCrypto)
data () => Env
Env :: HardForkLedgerConfig (CardanoEras StandardCrypto) -> ConsensusConfig (HardForkProtocol (CardanoEras StandardCrypto)) -> Env
[envLedgerConfig] :: Env -> HardForkLedgerConfig (CardanoEras StandardCrypto)
[envProtocolConfig] :: Env -> ConsensusConfig (HardForkProtocol (CardanoEras StandardCrypto))
genesisConfigToEnv :: GenesisConfig -> Either GenesisConfigError Env
envSecurityParam :: Env -> Word64
newtype () => LedgerState
LedgerState :: LedgerState (HardForkBlock (CardanoEras StandardCrypto)) -> LedgerState
[clsState] :: LedgerState -> LedgerState (HardForkBlock (CardanoEras StandardCrypto))
pattern LedgerStateAllegra :: () => LedgerState (ShelleyBlock protocol (AllegraEra StandardCrypto)) -> LedgerState
pattern LedgerStateAlonzo :: () => LedgerState (ShelleyBlock protocol (AlonzoEra StandardCrypto)) -> LedgerState
pattern LedgerStateBabbage :: () => LedgerState (ShelleyBlock protocol (BabbageEra StandardCrypto)) -> LedgerState
pattern LedgerStateByron :: LedgerState ByronBlock -> LedgerState
pattern LedgerStateConway :: () => LedgerState (ShelleyBlock protocol (ConwayEra StandardCrypto)) -> LedgerState
pattern LedgerStateMary :: () => LedgerState (ShelleyBlock protocol (MaryEra StandardCrypto)) -> LedgerState
pattern LedgerStateShelley :: () => LedgerState (ShelleyBlock protocol (ShelleyEra StandardCrypto)) -> LedgerState
initialLedgerState :: forall t (m :: Type -> Type). MonadIOTransError InitialLedgerStateError t m => NodeConfigFile 'In -> t m (Env, LedgerState)
encodeLedgerState :: LedgerState -> Encoding
decodeLedgerState :: Decoder s LedgerState
applyBlock :: Env -> LedgerState -> ValidationMode -> Block era -> Either LedgerStateError (LedgerState, [LedgerEvent])
data () => ValidationMode
FullValidation :: ValidationMode
QuickValidation :: ValidationMode
foldBlocks :: forall a t (m :: Type -> Type). (Show a, MonadIOTransError FoldBlocksError t m) => NodeConfigFile 'In -> SocketPath -> ValidationMode -> a -> (Env -> LedgerState -> [LedgerEvent] -> BlockInMode -> a -> IO (a, FoldStatus)) -> t m a
data () => FoldStatus
ContinueFold :: FoldStatus
StopFold :: FoldStatus
DebugFold :: FoldStatus
chainSyncClientWithLedgerState :: forall (m :: Type -> Type) a. Monad m => Env -> LedgerState -> ValidationMode -> ChainSyncClient (BlockInMode, Either LedgerStateError (LedgerState, [LedgerEvent])) ChainPoint ChainTip m a -> ChainSyncClient BlockInMode ChainPoint ChainTip m a
chainSyncClientPipelinedWithLedgerState :: forall (m :: Type -> Type) a. Monad m => Env -> LedgerState -> ValidationMode -> ChainSyncClientPipelined (BlockInMode, Either LedgerStateError (LedgerState, [LedgerEvent])) ChainPoint ChainTip m a -> ChainSyncClientPipelined BlockInMode ChainPoint ChainTip m a
data () => LedgerStateCondition
ConditionMet :: LedgerStateCondition
ConditionNotMet :: LedgerStateCondition
data () => AnyNewEpochState
[AnyNewEpochState] :: forall era. ShelleyBasedEra era -> NewEpochState (ShelleyLedgerEra era) -> AnyNewEpochState
checkLedgerStateCondition :: forall t (m :: Type -> Type) s. MonadIOTransError FoldBlocksError t m => NodeConfigFile 'In -> SocketPath -> ValidationMode -> EpochNo -> s -> (AnyNewEpochState -> State s LedgerStateCondition) -> t m (LedgerStateCondition, s)
getAnyNewEpochState :: ShelleyBasedEra era -> LedgerState -> Either LedgerStateError AnyNewEpochState
data () => LedgerStateError
ApplyBlockHashMismatch :: Text -> LedgerStateError
ApplyBlockError :: HardForkLedgerError (CardanoEras StandardCrypto) -> LedgerStateError
InvalidRollback :: SlotNo -> ChainPoint -> LedgerStateError
TerminationEpochReached :: EpochNo -> LedgerStateError
UnexpectedLedgerState :: AnyShelleyBasedEra -> NS (Current LedgerState) (CardanoEras StandardCrypto) -> LedgerStateError
ByronEraUnsupported :: LedgerStateError
DebugError :: !String -> LedgerStateError
data () => FoldBlocksError
FoldBlocksInitialLedgerStateError :: !InitialLedgerStateError -> FoldBlocksError
FoldBlocksApplyBlockError :: !LedgerStateError -> FoldBlocksError
FoldBlocksIOException :: !IOException -> FoldBlocksError
data () => GenesisConfigError
NEError :: !Text -> GenesisConfigError
NEByronConfig :: !FilePath -> !ConfigurationError -> GenesisConfigError
NEShelleyConfig :: !FilePath -> !Text -> GenesisConfigError
NEAlonzoConfig :: !FilePath -> !Text -> GenesisConfigError
NEConwayConfig :: !FilePath -> !Text -> GenesisConfigError
NECardanoConfig :: !Text -> GenesisConfigError
data () => InitialLedgerStateError
ILSEConfigFile :: Text -> InitialLedgerStateError
ILSEGenesisFile :: GenesisConfigError -> InitialLedgerStateError
ILSELedgerConsensusConfig :: GenesisConfigError -> InitialLedgerStateError
connectToLocalNode :: LocalNodeConnectInfo -> LocalNodeClientProtocolsInMode -> IO ()
connectToLocalNodeWithVersion :: LocalNodeConnectInfo -> (NodeToClientVersion -> LocalNodeClientProtocolsInMode) -> IO ()
data () => LocalNodeConnectInfo
LocalNodeConnectInfo :: ConsensusModeParams -> NetworkId -> SocketPath -> LocalNodeConnectInfo
[localConsensusModeParams] :: LocalNodeConnectInfo -> ConsensusModeParams
[localNodeNetworkId] :: LocalNodeConnectInfo -> NetworkId
[localNodeSocketPath] :: LocalNodeConnectInfo -> SocketPath
data () => ConsensusModeParams
[CardanoModeParams] :: EpochSlots -> ConsensusModeParams
type family ConsensusProtocol era
type family ChainDepStateProtocol era
type family ConsensusBlockForEra era
data () => LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
LocalNodeClientProtocols :: LocalChainSyncClient block point tip m -> Maybe (LocalTxSubmissionClient tx txerr m ()) -> Maybe (LocalStateQueryClient block point query m ()) -> Maybe (LocalTxMonitorClient txid tx slot m ()) -> LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
[localChainSyncClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> LocalChainSyncClient block point tip m
[localTxSubmissionClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalTxSubmissionClient tx txerr m ())
[localStateQueryClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalStateQueryClient block point query m ())
[localTxMonitoringClient] :: LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type) -> Maybe (LocalTxMonitorClient txid tx slot m ())
data () => LocalNodeClientParams
[LocalNodeClientParamsSingleBlock] :: forall block. (ProtocolClient block, LedgerSupportsProtocol (ShelleyBlock (TPraos StandardCrypto) (ShelleyEra StandardCrypto))) => ProtocolClientInfoArgs block -> (NodeToClientVersion -> LocalNodeClientProtocolsForBlock block) -> LocalNodeClientParams
[LocalNodeClientParamsCardano] :: forall block. (ProtocolClient block, CardanoHardForkConstraints (ConsensusCryptoForBlock block)) => ProtocolClientInfoArgs block -> (NodeToClientVersion -> LocalNodeClientProtocolsForBlock block) -> LocalNodeClientParams
mkLocalNodeClientParams :: ConsensusModeParams -> (NodeToClientVersion -> LocalNodeClientProtocolsInMode) -> LocalNodeClientParams
data () => LocalChainSyncClient block point tip (m :: Type -> Type)
NoLocalChainSyncClient :: LocalChainSyncClient block point tip (m :: Type -> Type)
LocalChainSyncClientPipelined :: ChainSyncClientPipelined block point tip m () -> LocalChainSyncClient block point tip (m :: Type -> Type)
LocalChainSyncClient :: ChainSyncClient block point tip m () -> LocalChainSyncClient block point tip (m :: Type -> Type)
data () => BlockType blk
[ByronBlockType] :: BlockType (HardForkBlock '[ByronBlock])
[ShelleyBlockType] :: BlockType (HardForkBlock '[ShelleyBlock (TPraos StandardCrypto) StandardShelley])
[CardanoBlockType] :: BlockType (HardForkBlock (CardanoEras StandardCrypto))
data () => SomeBlockType
[SomeBlockType] :: forall blk. BlockType blk -> SomeBlockType
reflBlockType :: BlockType blk -> BlockType blk' -> Maybe (blk :~: blk')
class (RunNode blk, IOLike m) => Protocol (m :: Type -> Type) blk where {
    data family ProtocolInfoArgs blk;
}
protocolInfo :: Protocol m blk => ProtocolInfoArgs blk -> (ProtocolInfo blk, m [BlockForging m blk])
data family ProtocolInfoArgs blk
newtype () => ChainSyncClient header point tip (m :: Type -> Type) a
ChainSyncClient :: m (ClientStIdle header point tip m a) -> ChainSyncClient header point tip (m :: Type -> Type) a
[runChainSyncClient] :: ChainSyncClient header point tip (m :: Type -> Type) a -> m (ClientStIdle header point tip m a)
newtype () => ChainSyncClientPipelined header point tip (m :: Type -> Type) a
ChainSyncClientPipelined :: m (ClientPipelinedStIdle 'Z header point tip m a) -> ChainSyncClientPipelined header point tip (m :: Type -> Type) a
[runChainSyncClientPipelined] :: ChainSyncClientPipelined header point tip (m :: Type -> Type) a -> m (ClientPipelinedStIdle 'Z header point tip m a)
data () => BlockInMode
[BlockInMode] :: forall era. CardanoEra era -> Block era -> BlockInMode
type LocalNodeClientProtocolsInMode = LocalNodeClientProtocols BlockInMode ChainPoint ChainTip SlotNo TxInMode TxIdInMode TxValidationErrorInCardanoMode QueryInMode IO
newtype () => LocalTxSubmissionClient tx reject (m :: Type -> Type) a
LocalTxSubmissionClient :: m (LocalTxClientStIdle tx reject m a) -> LocalTxSubmissionClient tx reject (m :: Type -> Type) a
[runLocalTxSubmissionClient] :: LocalTxSubmissionClient tx reject (m :: Type -> Type) a -> m (LocalTxClientStIdle tx reject m a)
data () => TxInMode
[TxInMode] :: forall era. ShelleyBasedEra era -> Tx era -> TxInMode
[TxInByronSpecial] :: GenTx ByronBlock -> TxInMode
data () => TxValidationErrorInCardanoMode
[TxValidationErrorInCardanoMode] :: forall era. TxValidationError era -> TxValidationErrorInCardanoMode
[TxValidationEraMismatch] :: EraMismatch -> TxValidationErrorInCardanoMode
data () => SubmitResult reason
SubmitSuccess :: SubmitResult reason
SubmitFail :: reason -> SubmitResult reason
submitTxToNodeLocal :: LocalNodeConnectInfo -> TxInMode -> IO (SubmitResult TxValidationErrorInCardanoMode)
newtype () => LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
LocalStateQueryClient :: m (ClientStIdle block point query m a) -> LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
[runLocalStateQueryClient] :: LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a -> m (ClientStIdle block point query m a)
data () => QueryInMode result
[QueryCurrentEra] :: QueryInMode AnyCardanoEra
[QueryInEra] :: forall era result1. QueryInEra era result1 -> QueryInMode (Either EraMismatch result1)
[QueryEraHistory] :: QueryInMode EraHistory
[QuerySystemStart] :: QueryInMode SystemStart
[QueryChainBlockNo] :: QueryInMode (WithOrigin BlockNo)
[QueryChainPoint] :: QueryInMode ChainPoint
newtype () => SystemStart
SystemStart :: UTCTime -> SystemStart
[getSystemStart] :: SystemStart -> UTCTime
data () => QueryInEra era result
[QueryByronUpdateState] :: QueryInEra ByronEra ByronUpdateState
[QueryInShelleyBasedEra] :: forall era result. ShelleyBasedEra era -> QueryInShelleyBasedEra era result -> QueryInEra era result
data () => QueryInShelleyBasedEra era result
[QueryEpoch] :: forall era. QueryInShelleyBasedEra era EpochNo
[QueryGenesisParameters] :: forall era. QueryInShelleyBasedEra era (GenesisParameters ShelleyEra)
[QueryProtocolParameters] :: forall era. QueryInShelleyBasedEra era (PParams (ShelleyLedgerEra era))
[QueryProtocolParametersUpdate] :: forall era. QueryInShelleyBasedEra era (Map (Hash GenesisKey) ProtocolParametersUpdate)
[QueryStakeDistribution] :: forall era. QueryInShelleyBasedEra era (Map (Hash StakePoolKey) Rational)
[QueryUTxO] :: forall era. QueryUTxOFilter -> QueryInShelleyBasedEra era (UTxO era)
[QueryStakeAddresses] :: forall era. Set StakeCredential -> NetworkId -> QueryInShelleyBasedEra era (Map StakeAddress Lovelace, Map StakeAddress PoolId)
[QueryStakePools] :: forall era. QueryInShelleyBasedEra era (Set PoolId)
[QueryStakePoolParameters] :: forall era. Set PoolId -> QueryInShelleyBasedEra era (Map PoolId StakePoolParameters)
[QueryDebugLedgerState] :: forall era. QueryInShelleyBasedEra era (SerialisedDebugLedgerState era)
[QueryProtocolState] :: forall era. QueryInShelleyBasedEra era (ProtocolState era)
[QueryCurrentEpochState] :: forall era. QueryInShelleyBasedEra era (SerialisedCurrentEpochState era)
[QueryPoolState] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedPoolState era)
[QueryPoolDistribution] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedPoolDistribution era)
[QueryStakeSnapshot] :: forall era. Maybe (Set PoolId) -> QueryInShelleyBasedEra era (SerialisedStakeSnapshots era)
[QueryStakeDelegDeposits] :: forall era. Set StakeCredential -> QueryInShelleyBasedEra era (Map StakeCredential Lovelace)
[QueryConstitution] :: forall era. QueryInShelleyBasedEra era (Maybe (Constitution (ShelleyLedgerEra era)))
[QueryGovState] :: forall era. QueryInShelleyBasedEra era (GovState (ShelleyLedgerEra era))
[QueryDRepState] :: forall era. Set (Credential 'DRepRole StandardCrypto) -> QueryInShelleyBasedEra era (Map (Credential 'DRepRole StandardCrypto) (DRepState StandardCrypto))
[QueryDRepStakeDistr] :: forall era. Set (DRep StandardCrypto) -> QueryInShelleyBasedEra era (Map (DRep StandardCrypto) Lovelace)
[QueryCommitteeMembersState] :: forall era. Set (Credential 'ColdCommitteeRole StandardCrypto) -> Set (Credential 'HotCommitteeRole StandardCrypto) -> Set MemberStatus -> QueryInShelleyBasedEra era (Maybe (CommitteeMembersState StandardCrypto))
[QueryStakeVoteDelegatees] :: forall era. Set StakeCredential -> QueryInShelleyBasedEra era (Map StakeCredential (DRep StandardCrypto))
data () => QueryUTxOFilter
QueryUTxOWhole :: QueryUTxOFilter
QueryUTxOByAddress :: Set AddressAny -> QueryUTxOFilter
QueryUTxOByTxIn :: Set TxIn -> QueryUTxOFilter
newtype () => UTxO era
UTxO :: Map TxIn (TxOut CtxUTxO era) -> UTxO era
[unUTxO] :: UTxO era -> Map TxIn (TxOut CtxUTxO era)
queryNodeLocalState :: LocalNodeConnectInfo -> Target ChainPoint -> QueryInMode result -> IO (Either AcquiringFailure result)
executeQueryCardanoMode :: SocketPath -> NetworkId -> QueryInMode (Either EraMismatch result) -> IO (Either QueryConvenienceError result)
data () => UnsupportedNtcVersionError
UnsupportedNtcVersionError :: !MinNodeToClientVersion -> !NodeToClientVersion -> UnsupportedNtcVersionError
newtype () => LocalTxMonitorClient txid tx slot (m :: Type -> Type) a
LocalTxMonitorClient :: m (ClientStIdle txid tx slot m a) -> LocalTxMonitorClient txid tx slot (m :: Type -> Type) a
[runLocalTxMonitorClient] :: LocalTxMonitorClient txid tx slot (m :: Type -> Type) a -> m (ClientStIdle txid tx slot m a)
data () => LocalTxMonitoringQuery
LocalTxMonitoringQueryTx :: TxIdInMode -> LocalTxMonitoringQuery
LocalTxMonitoringSendNextTx :: LocalTxMonitoringQuery
LocalTxMonitoringMempoolInformation :: LocalTxMonitoringQuery
data () => LocalTxMonitoringResult
LocalTxMonitoringTxExists :: TxId -> SlotNo -> LocalTxMonitoringResult
LocalTxMonitoringTxDoesNotExist :: TxId -> SlotNo -> LocalTxMonitoringResult
LocalTxMonitoringNextTx :: Maybe TxInMode -> SlotNo -> LocalTxMonitoringResult
LocalTxMonitoringMempoolSizeAndCapacity :: MempoolSizeAndCapacity -> SlotNo -> LocalTxMonitoringResult
data () => MempoolSizeAndCapacity
MempoolSizeAndCapacity :: !Word32 -> !Word32 -> !Word32 -> MempoolSizeAndCapacity
[capacityInBytes] :: MempoolSizeAndCapacity -> !Word32
[sizeInBytes] :: MempoolSizeAndCapacity -> !Word32
[numberOfTxs] :: MempoolSizeAndCapacity -> !Word32
queryTxMonitoringLocal :: LocalNodeConnectInfo -> LocalTxMonitoringQuery -> IO LocalTxMonitoringResult
data () => TxIdInMode
[TxIdInMode] :: forall era. CardanoEra era -> TxId -> TxIdInMode
data () => EraHistory
[EraHistory] :: forall (xs :: [Type]). CardanoBlock StandardCrypto ~ HardForkBlock xs => Interpreter xs -> EraHistory
getProgress :: SlotNo -> EraHistory -> Either PastHorizonException (RelativeTime, SlotLength)
getSlotForRelativeTime :: RelativeTime -> EraHistory -> Either PastHorizonException SlotNo
determineEra :: LocalNodeConnectInfo -> IO (Either AcquiringFailure AnyCardanoEra)
getLocalChainTip :: LocalNodeConnectInfo -> IO ChainTip
data () => OperationalCertificate
data () => OperationalCertificateIssueCounter
data () => OperationalCertIssueError
getHotKey :: OperationalCertificate -> VerificationKey KesKey
getKesPeriod :: OperationalCertificate -> Word
getOpCertCount :: OperationalCertificate -> Word64
issueOperationalCertificate :: VerificationKey KesKey -> Either (SigningKey StakePoolKey) (SigningKey GenesisDelegateExtendedKey) -> KESPeriod -> OperationalCertificateIssueCounter -> Either OperationalCertIssueError (OperationalCertificate, OperationalCertificateIssueCounter)
data () => CommitteeColdKey
data () => CommitteeColdExtendedKey
data () => CommitteeHotKey
data () => CommitteeHotExtendedKey
data () => GenesisKey
data () => GenesisExtendedKey
data () => GenesisDelegateKey
data () => GenesisDelegateExtendedKey
data () => GenesisUTxOKey
genesisUTxOPseudoTxIn :: NetworkId -> Hash GenesisUTxOKey -> TxIn
data () => GenesisParameters era
GenesisParameters :: UTCTime -> NetworkId -> Rational -> Int -> EpochSize -> NominalDiffTime -> Int -> Int -> Int -> Lovelace -> PParams (ShelleyLedgerEra era) -> GenesisParameters era
[protocolParamSystemStart] :: GenesisParameters era -> UTCTime
[protocolParamNetworkId] :: GenesisParameters era -> NetworkId
[protocolParamActiveSlotsCoefficient] :: GenesisParameters era -> Rational
[protocolParamSecurity] :: GenesisParameters era -> Int
[protocolParamEpochLength] :: GenesisParameters era -> EpochSize
[protocolParamSlotLength] :: GenesisParameters era -> NominalDiffTime
[protocolParamSlotsPerKESPeriod] :: GenesisParameters era -> Int
[protocolParamMaxKESEvolutions] :: GenesisParameters era -> Int
[protocolParamUpdateQuorum] :: GenesisParameters era -> Int
[protocolParamMaxLovelaceSupply] :: GenesisParameters era -> Lovelace
[protocolInitialUpdateableProtocolParameters] :: GenesisParameters era -> PParams (ShelleyLedgerEra era)
data () => GenesisKeyDelegationRequirements ere
[GenesisKeyDelegationRequirements] :: forall ere. ShelleyToBabbageEra ere -> Hash GenesisKey -> Hash GenesisDelegateKey -> Hash VrfKey -> GenesisKeyDelegationRequirements ere
data () => MirCertificateRequirements era
[MirCertificateRequirements] :: forall era. ShelleyToBabbageEra era -> MIRPot -> MIRTarget (EraCrypto (ShelleyLedgerEra era)) -> MirCertificateRequirements era
makeMIRCertificate :: MirCertificateRequirements era -> Certificate era
makeGenesisKeyDelegationCertificate :: GenesisKeyDelegationRequirements era -> Certificate era
data () => MIRTarget c
StakeAddressesMIR :: !Map (Credential 'Staking c) DeltaCoin -> MIRTarget c
SendToOppositePotMIR :: !Coin -> MIRTarget c
data () => MIRPot
ReservesMIR :: MIRPot
TreasuryMIR :: MIRPot
selectStakeCredentialWitness :: Certificate era -> Maybe StakeCredential
data () => UpdateProposal
UpdateProposal :: !Map (Hash GenesisKey) ProtocolParametersUpdate -> !EpochNo -> UpdateProposal
data () => ProtocolParametersUpdate
ProtocolParametersUpdate :: Maybe (Natural, Natural) -> Maybe Rational -> Maybe (Maybe PraosNonce) -> Maybe Word16 -> Maybe Word32 -> Maybe Word32 -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe Lovelace -> Maybe EpochInterval -> Maybe Natural -> Maybe Rational -> Maybe Rational -> Maybe Rational -> Map AnyPlutusScriptVersion CostModel -> Maybe ExecutionUnitPrices -> Maybe ExecutionUnits -> Maybe ExecutionUnits -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> ProtocolParametersUpdate
[protocolUpdateProtocolVersion] :: ProtocolParametersUpdate -> Maybe (Natural, Natural)
[protocolUpdateDecentralization] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateExtraPraosEntropy] :: ProtocolParametersUpdate -> Maybe (Maybe PraosNonce)
[protocolUpdateMaxBlockHeaderSize] :: ProtocolParametersUpdate -> Maybe Word16
[protocolUpdateMaxBlockBodySize] :: ProtocolParametersUpdate -> Maybe Word32
[protocolUpdateMaxTxSize] :: ProtocolParametersUpdate -> Maybe Word32
[protocolUpdateTxFeeFixed] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateTxFeePerByte] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateMinUTxOValue] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateStakeAddressDeposit] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateStakePoolDeposit] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdateMinPoolCost] :: ProtocolParametersUpdate -> Maybe Lovelace
[protocolUpdatePoolRetireMaxEpoch] :: ProtocolParametersUpdate -> Maybe EpochInterval
[protocolUpdateStakePoolTargetNum] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdatePoolPledgeInfluence] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateMonetaryExpansion] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateTreasuryCut] :: ProtocolParametersUpdate -> Maybe Rational
[protocolUpdateCostModels] :: ProtocolParametersUpdate -> Map AnyPlutusScriptVersion CostModel
[protocolUpdatePrices] :: ProtocolParametersUpdate -> Maybe ExecutionUnitPrices
[protocolUpdateMaxTxExUnits] :: ProtocolParametersUpdate -> Maybe ExecutionUnits
[protocolUpdateMaxBlockExUnits] :: ProtocolParametersUpdate -> Maybe ExecutionUnits
[protocolUpdateMaxValueSize] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateCollateralPercent] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateMaxCollateralInputs] :: ProtocolParametersUpdate -> Maybe Natural
[protocolUpdateUTxOCostPerByte] :: ProtocolParametersUpdate -> Maybe Lovelace
makeShelleyUpdateProposal :: ProtocolParametersUpdate -> [Hash GenesisKey] -> EpochNo -> UpdateProposal
data () => PraosNonce
makePraosNonce :: ByteString -> PraosNonce
newtype () => NetworkMagic
NetworkMagic :: Word32 -> NetworkMagic
[unNetworkMagic] :: NetworkMagic -> Word32
data () => ProtocolParametersConversionError
PpceOutOfBounds :: !ProtocolParameterName -> !Rational -> ProtocolParametersConversionError
PpceVersionInvalid :: !ProtocolParameterVersion -> ProtocolParametersConversionError
PpceInvalidCostModel :: !CostModel -> !CostModelApplyError -> ProtocolParametersConversionError
PpceMissingParameter :: !ProtocolParameterName -> ProtocolParametersConversionError
toLedgerPParams :: ShelleyBasedEra era -> ProtocolParameters -> Either ProtocolParametersConversionError (PParams (ShelleyLedgerEra era))
fromLedgerPParams :: ShelleyBasedEra era -> PParams (ShelleyLedgerEra era) -> ProtocolParameters
toCtxUTxOTxOut :: TxOut CtxTx era -> TxOut CtxUTxO era
fromNetworkMagic :: NetworkMagic -> NetworkId
toNetworkMagic :: NetworkId -> NetworkMagic
fromLedgerTxOuts :: ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> TxBodyScriptData era -> [TxOut CtxTx era]
toLedgerUTxO :: ShelleyBasedEra era -> UTxO era -> UTxO (ShelleyLedgerEra era)
runParsecParser :: Parser a -> Text -> Parser a
newtype () => SlotsInEpoch
SlotsInEpoch :: Word64 -> SlotsInEpoch
newtype () => SlotsToEpochEnd
SlotsToEpochEnd :: Word64 -> SlotsToEpochEnd
slotToEpoch :: SlotNo -> EraHistory -> Either PastHorizonException (EpochNo, SlotsInEpoch, SlotsToEpochEnd)
type SocketPath = File Socket 'InOut
data () => NodeToClientVersion
NodeToClientV_9 :: NodeToClientVersion
NodeToClientV_10 :: NodeToClientVersion
NodeToClientV_11 :: NodeToClientVersion
NodeToClientV_12 :: NodeToClientVersion
NodeToClientV_13 :: NodeToClientVersion
NodeToClientV_14 :: NodeToClientVersion
NodeToClientV_15 :: NodeToClientVersion
NodeToClientV_16 :: NodeToClientVersion
executeQueryAnyMode :: LocalNodeConnectInfo -> QueryInMode (Either EraMismatch result) -> IO (Either QueryConvenienceError result)
data () => LocalStateQueryExpr block point (query :: Type -> Type) r (m :: Type -> Type) a
executeLocalStateQueryExpr :: LocalNodeConnectInfo -> Target ChainPoint -> LocalStateQueryExpr BlockInMode ChainPoint QueryInMode () IO a -> IO (Either AcquiringFailure a)
queryExpr :: QueryInMode a -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError a)
chainPointToSlotNo :: ChainPoint -> Maybe SlotNo
chainPointToHeaderHash :: ChainPoint -> Maybe (Hash BlockHeader)
makeChainTip :: WithOrigin BlockNo -> ChainPoint -> ChainTip
parseFilePath :: String -> String -> Parser FilePath
writeSecrets :: FilePath -> [Char] -> [Char] -> (a -> ByteString) -> [a] -> IO ()
constructBalancedTx :: ShelleyBasedEra era -> TxBodyContent BuildTx era -> AddressInEra era -> Maybe Word -> UTxO era -> LedgerProtocolParameters era -> LedgerEpochInfo -> SystemStart -> Set PoolId -> Map StakeCredential Lovelace -> Map (Credential 'DRepRole StandardCrypto) Lovelace -> [ShelleyWitnessSigningKey] -> Either (TxBodyErrorAutoBalance era) (Tx era)
data () => QueryConvenienceError
AcqFailure :: AcquiringFailure -> QueryConvenienceError
QueryEraMismatch :: EraMismatch -> QueryConvenienceError
ByronEraNotSupported :: QueryConvenienceError
QceUnsupportedNtcVersion :: !UnsupportedNtcVersionError -> QueryConvenienceError
queryStateForBalancedTx :: CardanoEra era -> [TxIn] -> [Certificate era] -> LocalStateQueryExpr block point QueryInMode r IO (Either QueryConvenienceError (UTxO era, LedgerProtocolParameters era, EraHistory, SystemStart, Set PoolId, Map StakeCredential Lovelace, Map (Credential 'DRepRole StandardCrypto) Lovelace))
renderQueryConvenienceError :: QueryConvenienceError -> Text
newtype () => ScriptLockedTxInsError
ScriptLockedTxIns :: [TxIn] -> ScriptLockedTxInsError
data () => TxInsExistError
TxInsDoNotExist :: [TxIn] -> TxInsExistError
EmptyUTxO :: TxInsExistError
renderNotScriptLockedTxInsError :: ScriptLockedTxInsError -> Text
renderTxInsExistError :: TxInsExistError -> Text
txInsExistInUTxO :: [TxIn] -> UTxO era -> Either TxInsExistError ()
notScriptLockedTxIns :: [TxIn] -> UTxO era -> Either ScriptLockedTxInsError ()
textShow :: Show a => a -> Text
bounded :: (Bounded a, Integral a, Show a) => String -> ReadM a
queryChainBlockNo :: LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (WithOrigin BlockNo))
queryChainPoint :: LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError ChainPoint)
queryCurrentEpochState :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (SerialisedCurrentEpochState era)))
queryCurrentEra :: LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError AnyCardanoEra)
queryDebugLedgerState :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (SerialisedDebugLedgerState era)))
queryEpoch :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch EpochNo))
queryConstitutionHash :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Maybe (SafeHash (EraCrypto (ShelleyLedgerEra era)) AnchorData))))
queryEraHistory :: LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError EraHistory)
queryGenesisParameters :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (GenesisParameters ShelleyEra)))
queryPoolDistribution :: BabbageEraOnwards era -> Maybe (Set PoolId) -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (SerialisedPoolDistribution era)))
queryPoolState :: BabbageEraOnwards era -> Maybe (Set PoolId) -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (SerialisedPoolState era)))
queryProtocolParameters :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (PParams (ShelleyLedgerEra era))))
queryProtocolParametersUpdate :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Map (Hash GenesisKey) ProtocolParametersUpdate)))
queryProtocolState :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (ProtocolState era)))
queryStakeAddresses :: ShelleyBasedEra era -> Set StakeCredential -> NetworkId -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Map StakeAddress Lovelace, Map StakeAddress PoolId)))
queryStakeDelegDeposits :: BabbageEraOnwards era -> Set StakeCredential -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Map StakeCredential Lovelace)))
queryStakeDistribution :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Map (Hash StakePoolKey) Rational)))
queryStakePoolParameters :: ShelleyBasedEra era -> Set PoolId -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Map PoolId StakePoolParameters)))
queryStakePools :: ShelleyBasedEra era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Set PoolId)))
queryStakeSnapshot :: BabbageEraOnwards era -> Maybe (Set PoolId) -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (SerialisedStakeSnapshots era)))
querySystemStart :: LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError SystemStart)
queryUtxo :: ShelleyBasedEra era -> QueryUTxOFilter -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (UTxO era)))
queryConstitution :: ConwayEraOnwards era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Maybe (Constitution (ShelleyLedgerEra era)))))
queryGovState :: ConwayEraOnwards era -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (GovState (ShelleyLedgerEra era))))
queryDRepState :: ConwayEraOnwards era -> Set (Credential 'DRepRole StandardCrypto) -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Map (Credential 'DRepRole StandardCrypto) (DRepState StandardCrypto))))
queryDRepStakeDistribution :: ConwayEraOnwards era -> Set (DRep StandardCrypto) -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Map (DRep StandardCrypto) Lovelace)))
queryCommitteeMembersState :: ConwayEraOnwards era -> Set (Credential 'ColdCommitteeRole StandardCrypto) -> Set (Credential 'HotCommitteeRole StandardCrypto) -> Set MemberStatus -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Maybe (CommitteeMembersState StandardCrypto))))
queryStakeVoteDelegatees :: ConwayEraOnwards era -> Set StakeCredential -> LocalStateQueryExpr block point QueryInMode r IO (Either UnsupportedNtcVersionError (Either EraMismatch (Map StakeCredential (DRep StandardCrypto))))
data () => MemberStatus
Active :: MemberStatus
Expired :: MemberStatus
Unrecognized :: MemberStatus
data () => CommitteeMembersState c
CommitteeMembersState :: !Map (Credential 'ColdCommitteeRole c) (CommitteeMemberState c) -> !UnitInterval -> !EpochNo -> CommitteeMembersState c
[csCommittee] :: CommitteeMembersState c -> !Map (Credential 'ColdCommitteeRole c) (CommitteeMemberState c)
[csQuorum] :: CommitteeMembersState c -> !UnitInterval
[csEpochNo] :: CommitteeMembersState c -> !EpochNo
data () => DRepKey
data () => DRepExtendedKey
data () => DRepMetadata
data () => DRepMetadataReference
data () => DRepMetadataValidationError
validateAndHashDRepMetadata :: ByteString -> Either DRepMetadataValidationError (DRepMetadata, Hash DRepMetadata)
newtype () => AnchorDataHash
AnchorDataHash :: SafeHash StandardCrypto AnchorData -> AnchorDataHash
[unAnchorDataHash] :: AnchorDataHash -> SafeHash StandardCrypto AnchorData
newtype () => AnchorUrl
AnchorUrl :: Url -> AnchorUrl
[unAnchorUrl] :: AnchorUrl -> Url
data () => CommitteeColdkeyResignationRequirements era
[CommitteeColdkeyResignationRequirements] :: forall era. ConwayEraOnwards era -> KeyHash 'ColdCommitteeRole (EraCrypto (ShelleyLedgerEra era)) -> Maybe (Anchor (EraCrypto (ShelleyLedgerEra era))) -> CommitteeColdkeyResignationRequirements era
data () => CommitteeHotKeyAuthorizationRequirements era
[CommitteeHotKeyAuthorizationRequirements] :: forall era. ConwayEraOnwards era -> KeyHash 'ColdCommitteeRole (EraCrypto (ShelleyLedgerEra era)) -> KeyHash 'HotCommitteeRole (EraCrypto (ShelleyLedgerEra era)) -> CommitteeHotKeyAuthorizationRequirements era
data () => DRepRegistrationRequirements era
[DRepRegistrationRequirements] :: forall era. ConwayEraOnwards era -> Credential 'DRepRole (EraCrypto (ShelleyLedgerEra era)) -> Lovelace -> DRepRegistrationRequirements era
data () => DRepUnregistrationRequirements era
[DRepUnregistrationRequirements] :: forall era. ConwayEraOnwards era -> Credential 'DRepRole (EraCrypto (ShelleyLedgerEra era)) -> Lovelace -> DRepUnregistrationRequirements era
makeCommitteeColdkeyResignationCertificate :: CommitteeColdkeyResignationRequirements era -> Certificate era
makeCommitteeHotKeyAuthorizationCertificate :: CommitteeHotKeyAuthorizationRequirements era -> Certificate era
makeDrepRegistrationCertificate :: DRepRegistrationRequirements era -> Maybe (Anchor (EraCrypto (ShelleyLedgerEra era))) -> Certificate era
makeDrepUnregistrationCertificate :: DRepUnregistrationRequirements era -> Certificate era
data () => ResolvablePointers
[ResolvablePointers] :: forall era. (Era (ShelleyLedgerEra era), Show (PlutusPurpose AsIndex (ShelleyLedgerEra era)), Show (PlutusPurpose AsItem (ShelleyLedgerEra era)), Show (PlutusScript (ShelleyLedgerEra era))) => ShelleyBasedEra era -> !Map (PlutusPurpose AsIndex (ShelleyLedgerEra era)) (PlutusPurpose AsItem (ShelleyLedgerEra era), Maybe (PlutusScriptBytes, Language), ScriptHash StandardCrypto) -> ResolvablePointers


-- | This module provides a library interface that is intended to be the
--   complete API for Byron covering everything, including exposing
--   constructors for the lower level types.
module Cardano.Api.Byron
data family AsType t
pattern AsByronAddress :: AsType (Address ByronAddr)
pattern AsShelleyAddress :: AsType (Address ShelleyAddr)
pattern AsAllegraTx :: AsType (Tx AllegraEra)
pattern AsAlonzoTx :: AsType (Tx AlonzoEra)
pattern AsByronTx :: AsType (Tx ByronEra)
pattern AsByronTxBody :: AsType (TxBody ByronEra)
pattern AsByronWitness :: AsType (KeyWitness ByronEra)
pattern AsMaryTx :: AsType (Tx MaryEra)
pattern AsMaryTxBody :: AsType (TxBody MaryEra)
pattern AsShelleyTx :: AsType (Tx ShelleyEra)
pattern AsShelleyTxBody :: AsType (TxBody ShelleyEra)
pattern AsShelleyWitness :: AsType (KeyWitness ShelleyEra)
data family VerificationKey keyrole
data family SigningKey keyrole
data () => SomeByronSigningKey
AByronSigningKeyLegacy :: SigningKey ByronKeyLegacy -> SomeByronSigningKey
AByronSigningKey :: SigningKey ByronKey -> SomeByronSigningKey
data family Hash keyrole
data () => Address addrtype
[ByronAddress] :: Address -> Address ByronAddr
data () => NetworkId
Mainnet :: NetworkId
Testnet :: !NetworkMagic -> NetworkId
newtype () => TxId
TxId :: Hash StandardCrypto EraIndependentTxBody -> TxId
data () => TxIn
TxIn :: TxId -> TxIx -> TxIn
data () => TxOut ctx era
TxOut :: AddressInEra era -> TxOutValue era -> TxOutDatum ctx era -> ReferenceScript era -> TxOut ctx era
newtype () => TxIx
TxIx :: Word -> TxIx
newtype () => Lovelace
Lovelace :: Integer -> Lovelace
data () => ATxAux a
ATxAux :: !Annotated Tx a -> !Annotated TxWitness a -> !a -> ATxAux a
[aTaTx] :: ATxAux a -> !Annotated Tx a
[aTaWitness] :: ATxAux a -> !Annotated TxWitness a
[aTaAnnotation] :: ATxAux a -> !a
data () => KeyWitness era
[ByronKeyWitness] :: TxInWitness -> KeyWitness ByronEra
data () => WitnessNetworkIdOrByronAddress
WitnessNetworkId :: !NetworkId -> WitnessNetworkIdOrByronAddress
WitnessByronAddress :: !Address ByronAddr -> WitnessNetworkIdOrByronAddress
class () => Error e
prettyError :: Error e => e -> Doc ann
data () => FileError e
FileError :: FilePath -> e -> FileError e
FileErrorTempFile :: FilePath -> FilePath -> Handle -> FileError e
FileDoesNotExistError :: FilePath -> FileError e
FileIOError :: FilePath -> IOException -> FileError e
data () => LocalNodeConnectInfo
LocalNodeConnectInfo :: ConsensusModeParams -> NetworkId -> SocketPath -> LocalNodeConnectInfo
data () => LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
LocalNodeClientProtocols :: LocalChainSyncClient block point tip m -> Maybe (LocalTxSubmissionClient tx txerr m ()) -> Maybe (LocalStateQueryClient block point query m ()) -> Maybe (LocalTxMonitorClient txid tx slot m ()) -> LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
newtype () => ChainSyncClient header point tip (m :: Type -> Type) a
ChainSyncClient :: m (ClientStIdle header point tip m a) -> ChainSyncClient header point tip (m :: Type -> Type) a
[runChainSyncClient] :: ChainSyncClient header point tip (m :: Type -> Type) a -> m (ClientStIdle header point tip m a)
newtype () => LocalTxSubmissionClient tx reject (m :: Type -> Type) a
LocalTxSubmissionClient :: m (LocalTxClientStIdle tx reject m a) -> LocalTxSubmissionClient tx reject (m :: Type -> Type) a
newtype () => LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
LocalStateQueryClient :: m (ClientStIdle block point query m a) -> LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a
[runLocalStateQueryClient] :: LocalStateQueryClient block point (query :: Type -> Type) (m :: Type -> Type) a -> m (ClientStIdle block point query m a)
newtype () => NetworkMagic
NetworkMagic :: Word32 -> NetworkMagic
[unNetworkMagic] :: NetworkMagic -> Word32
newtype () => ByronUpdateProposal
ByronUpdateProposal :: AProposal ByteString -> ByronUpdateProposal
[unByronUpdateProposal] :: ByronUpdateProposal -> AProposal ByteString
data () => ByronProtocolParametersUpdate
ByronProtocolParametersUpdate :: !Maybe Word16 -> !Maybe Natural -> !Maybe Natural -> !Maybe Natural -> !Maybe Natural -> !Maybe Natural -> !Maybe LovelacePortion -> !Maybe LovelacePortion -> !Maybe LovelacePortion -> !Maybe LovelacePortion -> !Maybe SlotNumber -> !Maybe SoftforkRule -> !Maybe TxFeePolicy -> !Maybe EpochNumber -> ByronProtocolParametersUpdate
[bPpuScriptVersion] :: ByronProtocolParametersUpdate -> !Maybe Word16
[bPpuSlotDuration] :: ByronProtocolParametersUpdate -> !Maybe Natural
[bPpuMaxBlockSize] :: ByronProtocolParametersUpdate -> !Maybe Natural
[bPpuMaxHeaderSize] :: ByronProtocolParametersUpdate -> !Maybe Natural
[bPpuMaxTxSize] :: ByronProtocolParametersUpdate -> !Maybe Natural
[bPpuMaxProposalSize] :: ByronProtocolParametersUpdate -> !Maybe Natural
[bPpuMpcThd] :: ByronProtocolParametersUpdate -> !Maybe LovelacePortion
[bPpuHeavyDelThd] :: ByronProtocolParametersUpdate -> !Maybe LovelacePortion
[bPpuUpdateVoteThd] :: ByronProtocolParametersUpdate -> !Maybe LovelacePortion
[bPpuUpdateProposalThd] :: ByronProtocolParametersUpdate -> !Maybe LovelacePortion
[bPpuUpdateProposalTTL] :: ByronProtocolParametersUpdate -> !Maybe SlotNumber
[bPpuSoftforkRule] :: ByronProtocolParametersUpdate -> !Maybe SoftforkRule
[bPpuTxFeePolicy] :: ByronProtocolParametersUpdate -> !Maybe TxFeePolicy
[bPpuUnlockStakeEpoch] :: ByronProtocolParametersUpdate -> !Maybe EpochNumber
makeByronUpdateProposal :: NetworkId -> ProtocolVersion -> SoftwareVersion -> SystemTag -> InstallerHash -> SomeByronSigningKey -> ByronProtocolParametersUpdate -> ByronUpdateProposal
toByronLedgerUpdateProposal :: ByronUpdateProposal -> GenTx ByronBlock
makeProtocolParametersUpdate :: ByronProtocolParametersUpdate -> ProtocolParametersUpdate
newtype () => ByronVote
ByronVote :: AVote ByteString -> ByronVote
[unByronVote] :: ByronVote -> AVote ByteString
makeByronVote :: NetworkId -> SomeByronSigningKey -> ByronUpdateProposal -> Bool -> ByronVote
toByronLedgertoByronVote :: ByronVote -> GenTx ByronBlock
fromByronTxIn :: TxIn -> TxIn
toByronLovelace :: Lovelace -> Maybe Lovelace
toByronNetworkMagic :: NetworkId -> NetworkMagic
toByronProtocolMagicId :: NetworkId -> ProtocolMagicId
toByronRequiresNetworkMagic :: NetworkId -> RequiresNetworkMagic
applicationName :: ApplicationName
applicationVersion :: NumSoftwareVersion
softwareVersion :: SoftwareVersion
serializeByronTx :: ATxAux ByteString -> TextEnvelopeCddl
writeByronTxFileTextEnvelopeCddl :: File content 'Out -> ATxAux ByteString -> IO (Either (FileError ()) ())

module Cardano.Api.ChainSync.Client
newtype () => ChainSyncClient header point tip (m :: Type -> Type) a
ChainSyncClient :: m (ClientStIdle header point tip m a) -> ChainSyncClient header point tip (m :: Type -> Type) a
[runChainSyncClient] :: ChainSyncClient header point tip (m :: Type -> Type) a -> m (ClientStIdle header point tip m a)
data () => ClientStIdle header point tip (m :: Type -> Type) a
[SendMsgRequestNext] :: forall header point tip (m :: Type -> Type) a. ClientStNext header point tip m a -> m (ClientStNext header point tip m a) -> ClientStIdle header point tip m a
[SendMsgFindIntersect] :: forall point header tip (m :: Type -> Type) a. [point] -> ClientStIntersect header point tip m a -> ClientStIdle header point tip m a
[SendMsgDone] :: forall a header point tip (m :: Type -> Type). a -> ClientStIdle header point tip m a
data () => ClientStNext header point tip (m :: Type -> Type) a
ClientStNext :: (header -> tip -> ChainSyncClient header point tip m a) -> (point -> tip -> ChainSyncClient header point tip m a) -> ClientStNext header point tip (m :: Type -> Type) a
[recvMsgRollForward] :: ClientStNext header point tip (m :: Type -> Type) a -> header -> tip -> ChainSyncClient header point tip m a
[recvMsgRollBackward] :: ClientStNext header point tip (m :: Type -> Type) a -> point -> tip -> ChainSyncClient header point tip m a
data () => ClientStIntersect header point tip (m :: Type -> Type) a
ClientStIntersect :: (point -> tip -> ChainSyncClient header point tip m a) -> (tip -> ChainSyncClient header point tip m a) -> ClientStIntersect header point tip (m :: Type -> Type) a
[recvMsgIntersectFound] :: ClientStIntersect header point tip (m :: Type -> Type) a -> point -> tip -> ChainSyncClient header point tip m a
[recvMsgIntersectNotFound] :: ClientStIntersect header point tip (m :: Type -> Type) a -> tip -> ChainSyncClient header point tip m a
chainSyncClientNull :: forall (m :: Type -> Type) header point tip a. MonadTimer m => ChainSyncClient header point tip m a
mapChainSyncClient :: forall header header' point point' tip tip' (m :: Type -> Type) a. Functor m => (point -> point') -> (point' -> point) -> (header' -> header) -> (tip' -> tip) -> ChainSyncClient header point tip m a -> ChainSyncClient header' point' tip' m a

module Cardano.Api.ChainSync.ClientPipelined
newtype () => ChainSyncClientPipelined header point tip (m :: Type -> Type) a
ChainSyncClientPipelined :: m (ClientPipelinedStIdle 'Z header point tip m a) -> ChainSyncClientPipelined header point tip (m :: Type -> Type) a
[runChainSyncClientPipelined] :: ChainSyncClientPipelined header point tip (m :: Type -> Type) a -> m (ClientPipelinedStIdle 'Z header point tip m a)
data () => ClientPipelinedStIdle (n :: N) header point tip (m :: Type -> Type) a
[SendMsgRequestNext] :: forall header point tip (m :: Type -> Type) a. ClientStNext 'Z header point tip m a -> m (ClientStNext 'Z header point tip m a) -> ClientPipelinedStIdle 'Z header point tip m a
[SendMsgRequestNextPipelined] :: forall (n :: N) header point tip (m :: Type -> Type) a. ClientPipelinedStIdle ('S n) header point tip m a -> ClientPipelinedStIdle n header point tip m a
[SendMsgFindIntersect] :: forall point header tip (m :: Type -> Type) a. [point] -> ClientPipelinedStIntersect header point tip m a -> ClientPipelinedStIdle 'Z header point tip m a
[CollectResponse] :: forall (m :: Type -> Type) (n1 :: N) header point tip a. Maybe (m (ClientPipelinedStIdle ('S n1) header point tip m a)) -> ClientStNext n1 header point tip m a -> ClientPipelinedStIdle ('S n1) header point tip m a
[SendMsgDone] :: forall a header point tip (m :: Type -> Type). a -> ClientPipelinedStIdle 'Z header point tip m a
data () => ClientStNext (n :: N) header point tip (m :: Type -> Type) a
ClientStNext :: (header -> tip -> m (ClientPipelinedStIdle n header point tip m a)) -> (point -> tip -> m (ClientPipelinedStIdle n header point tip m a)) -> ClientStNext (n :: N) header point tip (m :: Type -> Type) a
[recvMsgRollForward] :: ClientStNext (n :: N) header point tip (m :: Type -> Type) a -> header -> tip -> m (ClientPipelinedStIdle n header point tip m a)
[recvMsgRollBackward] :: ClientStNext (n :: N) header point tip (m :: Type -> Type) a -> point -> tip -> m (ClientPipelinedStIdle n header point tip m a)
data () => ClientPipelinedStIntersect header point tip (m :: Type -> Type) a
ClientPipelinedStIntersect :: (point -> tip -> m (ClientPipelinedStIdle 'Z header point tip m a)) -> (tip -> m (ClientPipelinedStIdle 'Z header point tip m a)) -> ClientPipelinedStIntersect header point tip (m :: Type -> Type) a
[recvMsgIntersectFound] :: ClientPipelinedStIntersect header point tip (m :: Type -> Type) a -> point -> tip -> m (ClientPipelinedStIdle 'Z header point tip m a)
[recvMsgIntersectNotFound] :: ClientPipelinedStIntersect header point tip (m :: Type -> Type) a -> tip -> m (ClientPipelinedStIdle 'Z header point tip m a)
data () => ChainSyncInstruction header point tip
RollForward :: !header -> !tip -> ChainSyncInstruction header point tip
RollBackward :: !point -> !tip -> ChainSyncInstruction header point tip
data () => PipelineDecision (n :: N)
[Request] :: PipelineDecision 'Z
[Pipeline] :: forall (n :: N). PipelineDecision n
[CollectOrPipeline] :: forall (n1 :: N). PipelineDecision ('S n1)
[Collect] :: forall (n1 :: N). PipelineDecision ('S n1)
data () => MkPipelineDecision
[MkPipelineDecision] :: (forall (n :: N). () => Nat n -> WithOrigin BlockNo -> WithOrigin BlockNo -> (PipelineDecision n, MkPipelineDecision)) -> MkPipelineDecision
runPipelineDecision :: forall (n :: N). MkPipelineDecision -> Nat n -> WithOrigin BlockNo -> WithOrigin BlockNo -> (PipelineDecision n, MkPipelineDecision)
constantPipelineDecision :: (forall (n :: N). () => Nat n -> WithOrigin BlockNo -> WithOrigin BlockNo -> PipelineDecision n) -> MkPipelineDecision
pipelineDecisionMax :: forall (n :: N). Word16 -> Nat n -> WithOrigin BlockNo -> WithOrigin BlockNo -> PipelineDecision n
pipelineDecisionMin :: forall (n :: N). Word16 -> Nat n -> WithOrigin BlockNo -> WithOrigin BlockNo -> PipelineDecision n
pipelineDecisionLowHighMark :: Word16 -> Word16 -> MkPipelineDecision
data () => N
Z :: N
S :: N -> N
data () => Nat (n :: N)
pattern Zero :: () => 'Z ~ n => Nat n
pattern Succ :: forall m n. () => m ~ 'S n => Nat n -> Nat m
natToInt :: forall (n :: N). Nat n -> Int
mapChainSyncClientPipelined :: forall header header' point point' tip tip' (m :: Type -> Type) a. Functor m => (point -> point') -> (point' -> point) -> (header' -> header) -> (tip' -> tip) -> ChainSyncClientPipelined header point tip m a -> ChainSyncClientPipelined header' point' tip' m a


-- | BIP32-Ed25519 digital signatures.
module Cardano.Api.Crypto.Ed25519Bip32
data Ed25519Bip32DSIGN
data family SigDSIGN v
data family SignKeyDSIGN v
data family VerKeyDSIGN v

-- | Serialise an <a>XPrv</a> to a <a>ByteString</a> (96 bytes).
--   
--   In <tt>cardano-crypto</tt>, an <a>XPrv</a> was originally serialised
--   using the following 128-byte binary format:
--   
--   TODO: table
--   
--   However, this function serialises an <a>XPrv</a> using a more compact
--   96-byte binary format:
--   
--   TODO: table
xPrvToBytes :: XPrv -> ByteString

-- | Deserialise an <a>XPrv</a> from a <a>ByteString</a> (96 bytes).
--   
--   In <tt>cardano-crypto</tt>, an <a>XPrv</a> was originally deserialised
--   using the following 128-byte binary format:
--   
--   TODO: table
--   
--   However, this function deserialises an <a>XPrv</a> using a more
--   compact 96-byte binary format:
--   
--   TODO: table
xPrvFromBytes :: ByteString -> Maybe XPrv
instance NoThunks.Class.NoThunks (Cardano.Crypto.DSIGN.Class.SigDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Data.ByteArray.Types.ByteArrayAccess (Cardano.Crypto.DSIGN.Class.SigDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance GHC.Generics.Generic (Cardano.Crypto.DSIGN.Class.SigDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance GHC.Classes.Eq (Cardano.Crypto.DSIGN.Class.SigDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance GHC.Show.Show (Cardano.Crypto.DSIGN.Class.SigDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance NoThunks.Class.NoThunks (Cardano.Crypto.DSIGN.Class.SignKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Control.DeepSeq.NFData (Cardano.Crypto.DSIGN.Class.SignKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Data.ByteArray.Types.ByteArrayAccess (Cardano.Crypto.DSIGN.Class.SignKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance GHC.Generics.Generic (Cardano.Crypto.DSIGN.Class.SignKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance NoThunks.Class.NoThunks (Cardano.Crypto.DSIGN.Class.VerKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Control.DeepSeq.NFData (Cardano.Crypto.DSIGN.Class.VerKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance GHC.Generics.Generic (Cardano.Crypto.DSIGN.Class.VerKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance GHC.Classes.Eq (Cardano.Crypto.DSIGN.Class.VerKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance GHC.Show.Show (Cardano.Crypto.DSIGN.Class.VerKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Cardano.Crypto.DSIGN.Class.DSIGNAlgorithm Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN
instance GHC.Show.Show (Cardano.Crypto.DSIGN.Class.SignKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Cardano.Binary.ToCBOR.ToCBOR (Cardano.Crypto.DSIGN.Class.VerKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Cardano.Binary.FromCBOR.FromCBOR (Cardano.Crypto.DSIGN.Class.VerKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Cardano.Binary.ToCBOR.ToCBOR (Cardano.Crypto.DSIGN.Class.SignKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Cardano.Binary.FromCBOR.FromCBOR (Cardano.Crypto.DSIGN.Class.SignKeyDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Cardano.Binary.ToCBOR.ToCBOR (Cardano.Crypto.DSIGN.Class.SigDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)
instance Cardano.Binary.FromCBOR.FromCBOR (Cardano.Crypto.DSIGN.Class.SigDSIGN Cardano.Api.Crypto.Ed25519Bip32.Ed25519Bip32DSIGN)

module Cardano.Api.Experimental
data () => BabbageEra
data () => ConwayEra
data () => Era version
pattern CurrentEra :: Era BabbageEra
pattern UpcomingEra :: Era ConwayEra
class () => UseEra version
type family VersionToSbe version
useEra :: UseEra version => Era version
protocolVersionToSbe :: Era version -> Maybe (ShelleyBasedEra (VersionToSbe version))

module Cardano.Api.Ledger


-- | This module provides a library interface that is intended to be the
--   complete API for Shelley covering everything, including exposing
--   constructors for the lower level types.
module Cardano.Api.Shelley
data () => ShelleyGenesis c
ShelleyGenesis :: !UTCTime -> !Word32 -> !Network -> !PositiveUnitInterval -> !Word64 -> !EpochSize -> !Word64 -> !Word64 -> !NominalDiffTimeMicro -> !Word64 -> !Word64 -> !PParams (ShelleyEra c) -> !Map (KeyHash 'Genesis c) (GenDelegPair c) -> ListMap (Addr c) Coin -> ShelleyGenesisStaking c -> ShelleyGenesis c
[sgSystemStart] :: ShelleyGenesis c -> !UTCTime
[sgNetworkMagic] :: ShelleyGenesis c -> !Word32
[sgNetworkId] :: ShelleyGenesis c -> !Network
[sgActiveSlotsCoeff] :: ShelleyGenesis c -> !PositiveUnitInterval
[sgSecurityParam] :: ShelleyGenesis c -> !Word64
[sgEpochLength] :: ShelleyGenesis c -> !EpochSize
[sgSlotsPerKESPeriod] :: ShelleyGenesis c -> !Word64
[sgMaxKESEvolutions] :: ShelleyGenesis c -> !Word64
[sgSlotLength] :: ShelleyGenesis c -> !NominalDiffTimeMicro
[sgUpdateQuorum] :: ShelleyGenesis c -> !Word64
[sgMaxLovelaceSupply] :: ShelleyGenesis c -> !Word64
[sgProtocolParams] :: ShelleyGenesis c -> !PParams (ShelleyEra c)
[sgGenDelegs] :: ShelleyGenesis c -> !Map (KeyHash 'Genesis c) (GenDelegPair c)
[sgInitialFunds] :: ShelleyGenesis c -> ListMap (Addr c) Coin
[sgStaking] :: ShelleyGenesis c -> ShelleyGenesisStaking c
shelleyGenesisDefaults :: ShelleyGenesis StandardCrypto
class (Eq VerificationKey keyrole, Show VerificationKey keyrole, SerialiseAsRawBytes Hash keyrole, HasTextEnvelope VerificationKey keyrole, HasTextEnvelope SigningKey keyrole) => Key keyrole where {
    data family VerificationKey keyrole;
    data family SigningKey keyrole;
}
getVerificationKey :: Key keyrole => SigningKey keyrole -> VerificationKey keyrole
deterministicSigningKey :: Key keyrole => AsType keyrole -> Seed -> SigningKey keyrole
deterministicSigningKeySeedSize :: Key keyrole => AsType keyrole -> Word
verificationKeyHash :: Key keyrole => VerificationKey keyrole -> Hash keyrole
data family VerificationKey keyrole
data family SigningKey keyrole
data family Hash keyrole
data family AsType t
pattern AsByronAddress :: AsType (Address ByronAddr)
pattern AsShelleyAddress :: AsType (Address ShelleyAddr)
pattern AsAllegraTx :: AsType (Tx AllegraEra)
pattern AsAlonzoTx :: AsType (Tx AlonzoEra)
pattern AsByronTx :: AsType (Tx ByronEra)
pattern AsByronTxBody :: AsType (TxBody ByronEra)
pattern AsByronWitness :: AsType (KeyWitness ByronEra)
pattern AsMaryTx :: AsType (Tx MaryEra)
pattern AsMaryTxBody :: AsType (TxBody MaryEra)
pattern AsShelleyTx :: AsType (Tx ShelleyEra)
pattern AsShelleyTxBody :: AsType (TxBody ShelleyEra)
pattern AsShelleyWitness :: AsType (KeyWitness ShelleyEra)
data () => Address addrtype
[ShelleyAddress] :: Network -> PaymentCredential StandardCrypto -> StakeReference StandardCrypto -> Address ShelleyAddr
toShelleyAddr :: AddressInEra era -> Addr StandardCrypto
fromShelleyAddr :: ShelleyBasedEra era -> Addr StandardCrypto -> AddressInEra era
fromShelleyAddrIsSbe :: ShelleyBasedEra era -> Addr StandardCrypto -> AddressInEra era
fromShelleyAddrToAny :: Addr StandardCrypto -> AddressAny
toShelleyStakeCredential :: StakeCredential -> StakeCredential StandardCrypto
fromShelleyStakeCredential :: StakeCredential StandardCrypto -> StakeCredential
data () => NetworkId
Mainnet :: NetworkId
Testnet :: !NetworkMagic -> NetworkId
data () => PaymentCredential
PaymentCredentialByKey :: Hash PaymentKey -> PaymentCredential
PaymentCredentialByScript :: ScriptHash -> PaymentCredential
data () => StakeAddress
[StakeAddress] :: Network -> StakeCredential StandardCrypto -> StakeAddress
data () => StakeAddressReference
StakeAddressByValue :: StakeCredential -> StakeAddressReference
StakeAddressByPointer :: StakeAddressPointer -> StakeAddressReference
NoStakeAddress :: StakeAddressReference
data () => StakeCredential
StakeCredentialByKey :: Hash StakeKey -> StakeCredential
StakeCredentialByScript :: ScriptHash -> StakeCredential
toShelleyStakeAddr :: StakeAddress -> RewardAcnt StandardCrypto
fromShelleyStakeAddr :: RewardAcnt StandardCrypto -> StakeAddress
fromShelleyStakeReference :: StakeReference StandardCrypto -> StakeAddressReference
fromShelleyPaymentCredential :: PaymentCredential StandardCrypto -> PaymentCredential
data () => TxBody era
[ShelleyTxBody] :: forall era. ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> [Script (ShelleyLedgerEra era)] -> TxBodyScriptData era -> Maybe (TxAuxData (ShelleyLedgerEra era)) -> TxScriptValidity era -> TxBody era
newtype () => TxId
TxId :: Hash StandardCrypto EraIndependentTxBody -> TxId
toShelleyTxId :: TxId -> TxId StandardCrypto
fromShelleyTxId :: TxId StandardCrypto -> TxId
getTxIdShelley :: (EraCrypto (ShelleyLedgerEra era) ~ StandardCrypto, EraTxBody (ShelleyLedgerEra era)) => ShelleyBasedEra era -> TxBody (ShelleyLedgerEra era) -> TxId
data () => TxIn
TxIn :: TxId -> TxIx -> TxIn
toShelleyTxIn :: TxIn -> TxIn StandardCrypto
fromShelleyTxIn :: TxIn StandardCrypto -> TxIn
data () => TxOut ctx era
TxOut :: AddressInEra era -> TxOutValue era -> TxOutDatum ctx era -> ReferenceScript era -> TxOut ctx era
toShelleyTxOut :: ShelleyLedgerEra era ~ ledgerera => ShelleyBasedEra era -> TxOut CtxUTxO era -> TxOut ledgerera
fromShelleyTxOut :: ShelleyBasedEra era -> TxOut (ShelleyLedgerEra era) -> TxOut ctx era
newtype () => TxIx
TxIx :: Word -> TxIx
newtype () => Lovelace
Lovelace :: Integer -> Lovelace
toShelleyLovelace :: Lovelace -> Coin
fromShelleyLovelace :: Coin -> Lovelace
toMaryValue :: Value -> MaryValue StandardCrypto
fromMaryValue :: MaryValue StandardCrypto -> Value
calcMinimumDeposit :: Value -> Lovelace -> Lovelace
signArbitraryBytesKes :: SigningKey KesKey -> Period -> ByteString -> SignedKES (KES StandardCrypto) ByteString
data () => Tx era
[ShelleyTx] :: forall era. ShelleyBasedEra era -> Tx (ShelleyLedgerEra era) -> Tx era
data () => KeyWitness era
[ShelleyBootstrapWitness] :: forall era. ShelleyBasedEra era -> BootstrapWitness StandardCrypto -> KeyWitness era
[ShelleyKeyWitness] :: forall era. ShelleyBasedEra era -> WitVKey 'Witness StandardCrypto -> KeyWitness era
data () => ShelleyWitnessSigningKey
WitnessPaymentKey :: SigningKey PaymentKey -> ShelleyWitnessSigningKey
WitnessPaymentExtendedKey :: SigningKey PaymentExtendedKey -> ShelleyWitnessSigningKey
WitnessStakeKey :: SigningKey StakeKey -> ShelleyWitnessSigningKey
WitnessStakeExtendedKey :: SigningKey StakeExtendedKey -> ShelleyWitnessSigningKey
WitnessStakePoolKey :: SigningKey StakePoolKey -> ShelleyWitnessSigningKey
WitnessGenesisKey :: SigningKey GenesisKey -> ShelleyWitnessSigningKey
WitnessGenesisExtendedKey :: SigningKey GenesisExtendedKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateKey :: SigningKey GenesisDelegateKey -> ShelleyWitnessSigningKey
WitnessGenesisDelegateExtendedKey :: SigningKey GenesisDelegateExtendedKey -> ShelleyWitnessSigningKey
data () => ShelleySigningKey
ShelleyNormalSigningKey :: SignKeyDSIGN StandardCrypto -> ShelleySigningKey
ShelleyExtendedSigningKey :: XPrv -> ShelleySigningKey
getShelleyKeyWitnessVerificationKey :: ShelleySigningKey -> VKey 'Witness StandardCrypto
getTxBodyAndWitnesses :: Tx era -> (TxBody era, [KeyWitness era])
makeShelleySignature :: SignableRepresentation tosign => tosign -> ShelleySigningKey -> SignedDSIGN StandardCrypto tosign
toShelleySigningKey :: ShelleyWitnessSigningKey -> ShelleySigningKey
fromConsensusBlock :: CardanoBlock StandardCrypto ~ block => block -> BlockInMode
toConsensusBlock :: CardanoBlock StandardCrypto ~ block => BlockInMode -> block
fromConsensusTip :: CardanoBlock StandardCrypto ~ block => Tip block -> ChainTip
fromConsensusPointHF :: forall block (xs :: [Type]). HeaderHash block ~ OneEraHash xs => Point block -> ChainPoint
toConsensusPointHF :: forall block (xs :: [Type]). HeaderHash block ~ OneEraHash xs => ChainPoint -> Point block
toShelleyMetadata :: Map Word64 TxMetadataValue -> Map Word64 Metadatum
fromShelleyMetadata :: Map Word64 Metadatum -> Map Word64 TxMetadataValue
toShelleyMetadatum :: TxMetadataValue -> Metadatum
fromShelleyMetadatum :: Metadatum -> TxMetadataValue
newtype () => LedgerProtocolParameters era
LedgerProtocolParameters :: PParams (ShelleyLedgerEra era) -> LedgerProtocolParameters era
[unLedgerProtocolParameters] :: LedgerProtocolParameters era -> PParams (ShelleyLedgerEra era)
data () => EraBasedProtocolParametersUpdate era
[ShelleyEraBasedProtocolParametersUpdate] :: CommonProtocolParametersUpdate -> DeprecatedAfterMaryPParams ShelleyEra -> DeprecatedAfterBabbagePParams ShelleyEra -> ShelleyToAlonzoPParams ShelleyEra -> EraBasedProtocolParametersUpdate ShelleyEra
[AllegraEraBasedProtocolParametersUpdate] :: CommonProtocolParametersUpdate -> DeprecatedAfterMaryPParams AllegraEra -> ShelleyToAlonzoPParams AllegraEra -> DeprecatedAfterBabbagePParams ShelleyEra -> EraBasedProtocolParametersUpdate AllegraEra
[MaryEraBasedProtocolParametersUpdate] :: CommonProtocolParametersUpdate -> DeprecatedAfterMaryPParams MaryEra -> ShelleyToAlonzoPParams MaryEra -> DeprecatedAfterBabbagePParams ShelleyEra -> EraBasedProtocolParametersUpdate MaryEra
[AlonzoEraBasedProtocolParametersUpdate] :: CommonProtocolParametersUpdate -> ShelleyToAlonzoPParams AlonzoEra -> AlonzoOnwardsPParams AlonzoEra -> DeprecatedAfterBabbagePParams ShelleyEra -> EraBasedProtocolParametersUpdate AlonzoEra
[BabbageEraBasedProtocolParametersUpdate] :: CommonProtocolParametersUpdate -> AlonzoOnwardsPParams BabbageEra -> DeprecatedAfterBabbagePParams ShelleyEra -> IntroducedInBabbagePParams BabbageEra -> EraBasedProtocolParametersUpdate BabbageEra
[ConwayEraBasedProtocolParametersUpdate] :: CommonProtocolParametersUpdate -> AlonzoOnwardsPParams ConwayEra -> IntroducedInBabbagePParams ConwayEra -> IntroducedInConwayPParams (ShelleyLedgerEra ConwayEra) -> EraBasedProtocolParametersUpdate ConwayEra
data () => CommonProtocolParametersUpdate
CommonProtocolParametersUpdate :: StrictMaybe Coin -> StrictMaybe Coin -> StrictMaybe Word32 -> StrictMaybe Word32 -> StrictMaybe Word16 -> StrictMaybe Coin -> StrictMaybe Coin -> StrictMaybe EpochInterval -> StrictMaybe Natural -> StrictMaybe NonNegativeInterval -> StrictMaybe UnitInterval -> StrictMaybe UnitInterval -> StrictMaybe Coin -> CommonProtocolParametersUpdate
[cppMinFeeA] :: CommonProtocolParametersUpdate -> StrictMaybe Coin
[cppMinFeeB] :: CommonProtocolParametersUpdate -> StrictMaybe Coin
[cppMaxBlockBodySize] :: CommonProtocolParametersUpdate -> StrictMaybe Word32
[cppMaxTxSize] :: CommonProtocolParametersUpdate -> StrictMaybe Word32
[cppMaxBlockHeaderSize] :: CommonProtocolParametersUpdate -> StrictMaybe Word16
[cppKeyDeposit] :: CommonProtocolParametersUpdate -> StrictMaybe Coin
[cppPoolDeposit] :: CommonProtocolParametersUpdate -> StrictMaybe Coin
[cppPoolRetireMaxEpoch] :: CommonProtocolParametersUpdate -> StrictMaybe EpochInterval
[cppStakePoolTargetNum] :: CommonProtocolParametersUpdate -> StrictMaybe Natural
[cppPoolPledgeInfluence] :: CommonProtocolParametersUpdate -> StrictMaybe NonNegativeInterval
[cppTreasuryExpansion] :: CommonProtocolParametersUpdate -> StrictMaybe UnitInterval
[cppMonetaryExpansion] :: CommonProtocolParametersUpdate -> StrictMaybe UnitInterval
[cppMinPoolCost] :: CommonProtocolParametersUpdate -> StrictMaybe Coin
data () => AlonzoOnwardsPParams ledgerera
AlonzoOnwardsPParams :: StrictMaybe CostModels -> StrictMaybe Prices -> StrictMaybe ExUnits -> StrictMaybe ExUnits -> StrictMaybe Natural -> StrictMaybe Natural -> StrictMaybe Natural -> AlonzoOnwardsPParams ledgerera
[alCostModels] :: AlonzoOnwardsPParams ledgerera -> StrictMaybe CostModels
[alPrices] :: AlonzoOnwardsPParams ledgerera -> StrictMaybe Prices
[alMaxTxExUnits] :: AlonzoOnwardsPParams ledgerera -> StrictMaybe ExUnits
[alMaxBlockExUnits] :: AlonzoOnwardsPParams ledgerera -> StrictMaybe ExUnits
[alMaxValSize] :: AlonzoOnwardsPParams ledgerera -> StrictMaybe Natural
[alCollateralPercentage] :: AlonzoOnwardsPParams ledgerera -> StrictMaybe Natural
[alMaxCollateralInputs] :: AlonzoOnwardsPParams ledgerera -> StrictMaybe Natural
newtype () => DeprecatedAfterBabbagePParams ledgerera
DeprecatedAfterBabbagePParams :: StrictMaybe ProtVer -> DeprecatedAfterBabbagePParams ledgerera
newtype () => DeprecatedAfterMaryPParams ledgerera
DeprecatedAfterMaryPParams :: StrictMaybe Coin -> DeprecatedAfterMaryPParams ledgerera
data () => ShelleyToAlonzoPParams ledgerera
ShelleyToAlonzoPParams :: StrictMaybe Nonce -> StrictMaybe UnitInterval -> ShelleyToAlonzoPParams ledgerera
newtype () => IntroducedInBabbagePParams era
IntroducedInBabbagePParams :: StrictMaybe CoinPerByte -> IntroducedInBabbagePParams era
data () => IntroducedInConwayPParams era
IntroducedInConwayPParams :: StrictMaybe PoolVotingThresholds -> StrictMaybe DRepVotingThresholds -> StrictMaybe Natural -> StrictMaybe EpochInterval -> StrictMaybe EpochInterval -> StrictMaybe Coin -> StrictMaybe Coin -> StrictMaybe EpochInterval -> IntroducedInConwayPParams era
[icPoolVotingThresholds] :: IntroducedInConwayPParams era -> StrictMaybe PoolVotingThresholds
[icDRepVotingThresholds] :: IntroducedInConwayPParams era -> StrictMaybe DRepVotingThresholds
[icMinCommitteeSize] :: IntroducedInConwayPParams era -> StrictMaybe Natural
[icCommitteeTermLength] :: IntroducedInConwayPParams era -> StrictMaybe EpochInterval
[icGovActionLifetime] :: IntroducedInConwayPParams era -> StrictMaybe EpochInterval
[icGovActionDeposit] :: IntroducedInConwayPParams era -> StrictMaybe Coin
[icDRepDeposit] :: IntroducedInConwayPParams era -> StrictMaybe Coin
[icDRepActivity] :: IntroducedInConwayPParams era -> StrictMaybe EpochInterval
createEraBasedProtocolParamUpdate :: ShelleyBasedEra era -> EraBasedProtocolParametersUpdate era -> PParamsUpdate (ShelleyLedgerEra era)
convertToLedgerProtocolParameters :: ShelleyBasedEra era -> ProtocolParameters -> Either ProtocolParametersConversionError (LedgerProtocolParameters era)
data () => ProtocolParameters
ProtocolParameters :: (Natural, Natural) -> Maybe Rational -> Maybe PraosNonce -> Natural -> Natural -> Natural -> Lovelace -> Lovelace -> Maybe Lovelace -> Lovelace -> Lovelace -> Lovelace -> EpochInterval -> Natural -> Rational -> Rational -> Rational -> Map AnyPlutusScriptVersion CostModel -> Maybe ExecutionUnitPrices -> Maybe ExecutionUnits -> Maybe ExecutionUnits -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Lovelace -> ProtocolParameters
[protocolParamProtocolVersion] :: ProtocolParameters -> (Natural, Natural)
[protocolParamDecentralization] :: ProtocolParameters -> Maybe Rational
[protocolParamExtraPraosEntropy] :: ProtocolParameters -> Maybe PraosNonce
[protocolParamMaxBlockHeaderSize] :: ProtocolParameters -> Natural
[protocolParamMaxBlockBodySize] :: ProtocolParameters -> Natural
[protocolParamMaxTxSize] :: ProtocolParameters -> Natural
[protocolParamTxFeeFixed] :: ProtocolParameters -> Lovelace
[protocolParamTxFeePerByte] :: ProtocolParameters -> Lovelace
[protocolParamMinUTxOValue] :: ProtocolParameters -> Maybe Lovelace
[protocolParamStakeAddressDeposit] :: ProtocolParameters -> Lovelace
[protocolParamStakePoolDeposit] :: ProtocolParameters -> Lovelace
[protocolParamMinPoolCost] :: ProtocolParameters -> Lovelace
[protocolParamPoolRetireMaxEpoch] :: ProtocolParameters -> EpochInterval
[protocolParamStakePoolTargetNum] :: ProtocolParameters -> Natural
[protocolParamPoolPledgeInfluence] :: ProtocolParameters -> Rational
[protocolParamMonetaryExpansion] :: ProtocolParameters -> Rational
[protocolParamTreasuryCut] :: ProtocolParameters -> Rational
[protocolParamCostModels] :: ProtocolParameters -> Map AnyPlutusScriptVersion CostModel
[protocolParamPrices] :: ProtocolParameters -> Maybe ExecutionUnitPrices
[protocolParamMaxTxExUnits] :: ProtocolParameters -> Maybe ExecutionUnits
[protocolParamMaxBlockExUnits] :: ProtocolParameters -> Maybe ExecutionUnits
[protocolParamMaxValueSize] :: ProtocolParameters -> Maybe Natural
[protocolParamCollateralPercent] :: ProtocolParameters -> Maybe Natural
[protocolParamMaxCollateralInputs] :: ProtocolParameters -> Maybe Natural
[protocolParamUTxOCostPerByte] :: ProtocolParameters -> Maybe Lovelace
checkProtocolParameters :: ShelleyBasedEra era -> ProtocolParameters -> Either ProtocolParametersError ()
data () => ProtocolParametersError
PParamsErrorMissingMinUTxoValue :: !AnyCardanoEra -> ProtocolParametersError
PParamsErrorMissingAlonzoProtocolParameter :: ProtocolParametersError
fromShelleyBasedScript :: ShelleyBasedEra era -> Script (ShelleyLedgerEra era) -> ScriptInEra era
toShelleyScript :: ScriptInEra era -> Script (ShelleyLedgerEra era)
toShelleyMultiSig :: (Era era, EraCrypto era ~ StandardCrypto) => SimpleScript -> Either MultiSigError (MultiSig era)
fromShelleyMultiSig :: (Era era, EraCrypto era ~ StandardCrypto) => MultiSig era -> SimpleScript
toAllegraTimelock :: (Era era, EraCrypto era ~ StandardCrypto) => SimpleScript -> Timelock era
fromAllegraTimelock :: (Era era, EraCrypto era ~ StandardCrypto) => Timelock era -> SimpleScript
toShelleyScriptHash :: ScriptHash -> ScriptHash StandardCrypto
fromShelleyScriptHash :: ScriptHash StandardCrypto -> ScriptHash
data () => PlutusScript lang
[PlutusScriptSerialised] :: forall lang. ShortByteString -> PlutusScript lang
data () => PlutusScriptOrReferenceInput lang
PScript :: PlutusScript lang -> PlutusScriptOrReferenceInput lang
PReferenceScript :: TxIn -> Maybe ScriptHash -> PlutusScriptOrReferenceInput lang
data () => SimpleScriptOrReferenceInput lang
SScript :: SimpleScript -> SimpleScriptOrReferenceInput lang
SReferenceScript :: TxIn -> Maybe ScriptHash -> SimpleScriptOrReferenceInput lang
toPlutusData :: ScriptData -> Data
fromPlutusData :: Data -> ScriptData
toAlonzoData :: Era ledgerera => HashableScriptData -> Data ledgerera
fromAlonzoData :: Data ledgerera -> HashableScriptData
toAlonzoPrices :: ExecutionUnitPrices -> Either ProtocolParametersConversionError Prices
fromAlonzoPrices :: Prices -> ExecutionUnitPrices
toAlonzoExUnits :: ExecutionUnits -> ExUnits
fromAlonzoExUnits :: ExUnits -> ExecutionUnits
toScriptIndex :: AlonzoEraOnwards era -> PlutusPurpose AsIndex (ShelleyLedgerEra era) -> ScriptWitnessIndex
scriptDataFromJsonDetailedSchema :: Value -> Either ScriptDataJsonSchemaError HashableScriptData
scriptDataToJsonDetailedSchema :: HashableScriptData -> Value
calculateExecutionUnitsLovelace :: Prices -> ExecutionUnits -> Maybe Lovelace
data () => ReferenceScript era
[ReferenceScript] :: forall era. BabbageEraOnwards era -> ScriptInAnyLang -> ReferenceScript era
[ReferenceScriptNone] :: forall era. ReferenceScript era
refScriptToShelleyScript :: ShelleyBasedEra era -> ReferenceScript era -> StrictMaybe (Script (ShelleyLedgerEra era))
data () => Certificate era
[ShelleyRelatedCertificate] :: forall era. ShelleyToBabbageEra era -> ShelleyTxCert (ShelleyLedgerEra era) -> Certificate era
[ConwayCertificate] :: forall era. ConwayEraOnwards era -> ConwayTxCert (ShelleyLedgerEra era) -> Certificate era
toShelleyCertificate :: Certificate era -> TxCert (ShelleyLedgerEra era)
fromShelleyCertificate :: ShelleyBasedEra era -> TxCert (ShelleyLedgerEra era) -> Certificate era
toShelleyPoolParams :: StakePoolParameters -> PoolParams StandardCrypto
data () => OperationalCertificate
OperationalCertificate :: !OCert StandardCrypto -> !VerificationKey StakePoolKey -> OperationalCertificate
data () => OperationalCertificateIssueCounter
OperationalCertificateIssueCounter :: !Word64 -> !VerificationKey StakePoolKey -> OperationalCertificateIssueCounter
[opCertIssueCount] :: OperationalCertificateIssueCounter -> !Word64
[opCertIssueColdKey] :: OperationalCertificateIssueCounter -> !VerificationKey StakePoolKey
data () => OperationalCertIssueError
OperationalCertKeyMismatch :: VerificationKey StakePoolKey -> VerificationKey StakePoolKey -> OperationalCertIssueError
data () => StakePoolMetadata
StakePoolMetadata :: !Text -> !Text -> !Text -> !Text -> StakePoolMetadata
stakePoolName :: StakePoolMetadata -> Text
stakePoolDescription :: StakePoolMetadata -> Text
stakePoolTicker :: StakePoolMetadata -> Text
stakePoolHomepage :: StakePoolMetadata -> Text
data () => StakePoolMetadataReference
StakePoolMetadataReference :: Text -> Hash StakePoolMetadata -> StakePoolMetadataReference
stakePoolMetadataURL :: StakePoolMetadataReference -> Text
stakePoolMetadataHash :: StakePoolMetadataReference -> Hash StakePoolMetadata
data () => StakePoolParameters
StakePoolParameters :: PoolId -> Hash VrfKey -> Lovelace -> Rational -> StakeAddress -> Lovelace -> [Hash StakeKey] -> [StakePoolRelay] -> Maybe StakePoolMetadataReference -> StakePoolParameters
stakePoolId :: StakePoolParameters -> PoolId
stakePoolVRF :: StakePoolParameters -> Hash VrfKey
stakePoolCost :: StakePoolParameters -> Lovelace
stakePoolMargin :: StakePoolParameters -> Rational
stakePoolRewardAccount :: StakePoolParameters -> StakeAddress
stakePoolPledge :: StakePoolParameters -> Lovelace
stakePoolOwners :: StakePoolParameters -> [Hash StakeKey]
stakePoolRelays :: StakePoolParameters -> [StakePoolRelay]
stakePoolMetadata :: StakePoolParameters -> Maybe StakePoolMetadataReference
data () => StakePoolRelay
StakePoolRelayIp :: Maybe IPv4 -> Maybe IPv6 -> Maybe PortNumber -> StakePoolRelay
StakePoolRelayDnsARecord :: ByteString -> Maybe PortNumber -> StakePoolRelay
StakePoolRelayDnsSrvRecord :: ByteString -> StakePoolRelay
newtype () => EpochNo
EpochNo :: Word64 -> EpochNo
[unEpochNo] :: EpochNo -> Word64
createAnchor :: Url -> ByteString -> Anchor StandardCrypto
createPreviousGovernanceActionId :: forall era (r :: GovActionPurpose). EraCrypto (ShelleyLedgerEra era) ~ StandardCrypto => TxId -> Word32 -> GovPurposeId r (ShelleyLedgerEra era)
createGovernanceActionId :: TxId -> Word32 -> GovActionId StandardCrypto
newtype () => DRepMetadata
DRepMetadata :: ByteString -> DRepMetadata
data () => DRepMetadataReference
DRepMetadataReference :: Text -> Hash DRepMetadata -> DRepMetadataReference
data () => StakePoolKey
type PoolId = Hash StakePoolKey
data () => KesKey
newtype () => KESPeriod
KESPeriod :: Word -> KESPeriod
[unKESPeriod] :: KESPeriod -> Word
data () => VrfKey
data () => LocalNodeConnectInfo
LocalNodeConnectInfo :: ConsensusModeParams -> NetworkId -> SocketPath -> LocalNodeConnectInfo
data () => LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
LocalNodeClientProtocols :: LocalChainSyncClient block point tip m -> Maybe (LocalTxSubmissionClient tx txerr m ()) -> Maybe (LocalStateQueryClient block point query m ()) -> Maybe (LocalTxMonitorClient txid tx slot m ()) -> LocalNodeClientProtocols block point tip slot tx txid txerr (query :: Type -> Type) (m :: Type -> Type)
type family ShelleyLedgerEra era = (ledgerera :: Type) | ledgerera -> era
data () => LedgerEvent
PoolRegistration :: LedgerEvent
PoolReRegistration :: LedgerEvent
IncrementalRewardsDistribution :: EpochNo -> Map StakeCredential (Set (Reward StandardCrypto)) -> LedgerEvent
RewardsDistribution :: EpochNo -> Map StakeCredential (Set (Reward StandardCrypto)) -> LedgerEvent
MIRDistribution :: MIRDistributionDetails -> LedgerEvent
PoolReap :: PoolReapDetails -> LedgerEvent
SuccessfulPlutusScript :: NonEmpty PlutusWithContext -> LedgerEvent
FailedPlutusScript :: NonEmpty PlutusWithContext -> LedgerEvent
NewGovernanceProposals :: TxId StandardCrypto -> AnyProposals -> LedgerEvent
EpochBoundaryRatificationState :: AnyRatificationState -> LedgerEvent
data () => AnyProposals
AnyProposals :: Proposals era -> AnyProposals
data () => AnyRatificationState
AnyRatificationState :: RatifyState era -> AnyRatificationState
data () => MIRDistributionDetails
MIRDistributionDetails :: Map StakeCredential Lovelace -> Map StakeCredential Lovelace -> Lovelace -> Lovelace -> MIRDistributionDetails
[mirddReservePayouts] :: MIRDistributionDetails -> Map StakeCredential Lovelace
[mirddTreasuryPayouts] :: MIRDistributionDetails -> Map StakeCredential Lovelace
[mirddReservesToTreasury] :: MIRDistributionDetails -> Lovelace
[mirddTreasuryToReserves] :: MIRDistributionDetails -> Lovelace
data () => PoolReapDetails
PoolReapDetails :: EpochNo -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace) -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace) -> PoolReapDetails
[prdEpochNo] :: PoolReapDetails -> EpochNo
[prdRefunded] :: PoolReapDetails -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace)
[prdUnclaimed] :: PoolReapDetails -> Map StakeCredential (Map (Hash StakePoolKey) Lovelace)
toLedgerEvent :: ConvertLedgerEvent blk => WrapLedgerEvent blk -> Maybe LedgerEvent
newtype () => DebugLedgerState era
DebugLedgerState :: NewEpochState (ShelleyLedgerEra era) -> DebugLedgerState era
[unDebugLedgerState] :: DebugLedgerState era -> NewEpochState (ShelleyLedgerEra era)
decodeDebugLedgerState :: FromCBOR (DebugLedgerState era) => SerialisedDebugLedgerState era -> Either (ByteString, DecoderError) (DebugLedgerState era)
newtype () => ProtocolState era
ProtocolState :: Serialised (ChainDepState (ConsensusProtocol era)) -> ProtocolState era
decodeProtocolState :: FromCBOR (ChainDepState (ConsensusProtocol era)) => ProtocolState era -> Either (ByteString, DecoderError) (ChainDepState (ConsensusProtocol era))
newtype () => SerialisedDebugLedgerState era
SerialisedDebugLedgerState :: Serialised (NewEpochState (ShelleyLedgerEra era)) -> SerialisedDebugLedgerState era
newtype () => CurrentEpochState era
CurrentEpochState :: EpochState (ShelleyLedgerEra era) -> CurrentEpochState era
newtype () => SerialisedCurrentEpochState era
SerialisedCurrentEpochState :: Serialised (EpochState (ShelleyLedgerEra era)) -> SerialisedCurrentEpochState era
decodeCurrentEpochState :: ShelleyBasedEra era -> SerialisedCurrentEpochState era -> Either DecoderError (CurrentEpochState era)
newtype () => PoolState era
PoolState :: PState (ShelleyLedgerEra era) -> PoolState era
newtype () => SerialisedPoolState era
SerialisedPoolState :: Serialised (PState (ShelleyLedgerEra era)) -> SerialisedPoolState era
decodePoolState :: (Era (ShelleyLedgerEra era), DecCBOR (PState (ShelleyLedgerEra era))) => SerialisedPoolState era -> Either DecoderError (PoolState era)
newtype () => PoolDistribution era
PoolDistribution :: PoolDistr (EraCrypto (ShelleyLedgerEra era)) -> PoolDistribution era
[unPoolDistr] :: PoolDistribution era -> PoolDistr (EraCrypto (ShelleyLedgerEra era))
newtype () => SerialisedPoolDistribution era
SerialisedPoolDistribution :: Serialised (PoolDistr (EraCrypto (ShelleyLedgerEra era))) -> SerialisedPoolDistribution era
decodePoolDistribution :: Crypto (EraCrypto (ShelleyLedgerEra era)) => ShelleyBasedEra era -> SerialisedPoolDistribution era -> Either DecoderError (PoolDistribution era)
newtype () => StakeSnapshot era
StakeSnapshot :: StakeSnapshots (EraCrypto (ShelleyLedgerEra era)) -> StakeSnapshot era
newtype () => SerialisedStakeSnapshots era
SerialisedStakeSnapshots :: Serialised (StakeSnapshots (EraCrypto (ShelleyLedgerEra era))) -> SerialisedStakeSnapshots era
decodeStakeSnapshot :: FromCBOR (StakeSnapshots (EraCrypto (ShelleyLedgerEra era))) => SerialisedStakeSnapshots era -> Either DecoderError (StakeSnapshot era)
newtype () => UTxO era
UTxO :: Map TxIn (TxOut CtxUTxO era) -> UTxO era
[unUTxO] :: UTxO era -> Map TxIn (TxOut CtxUTxO era)
data () => AcquiringFailure
AFPointTooOld :: AcquiringFailure
AFPointNotOnChain :: AcquiringFailure
newtype () => SystemStart
SystemStart :: UTCTime -> SystemStart
[getSystemStart] :: SystemStart -> UTCTime
data () => GovernanceAction era
MotionOfNoConfidence :: StrictMaybe (GovPurposeId 'CommitteePurpose (ShelleyLedgerEra era)) -> GovernanceAction era
ProposeNewConstitution :: StrictMaybe (GovPurposeId 'ConstitutionPurpose (ShelleyLedgerEra era)) -> Anchor StandardCrypto -> GovernanceAction era
ProposeNewCommittee :: StrictMaybe (GovPurposeId 'CommitteePurpose (ShelleyLedgerEra era)) -> [Hash CommitteeColdKey] -> Map (Hash CommitteeColdKey) EpochNo -> Rational -> GovernanceAction era
InfoAct :: GovernanceAction era
TreasuryWithdrawal :: [(Network, StakeCredential, Lovelace)] -> !StrictMaybe (ScriptHash StandardCrypto) -> GovernanceAction era
InitiateHardfork :: StrictMaybe (GovPurposeId 'HardForkPurpose (ShelleyLedgerEra era)) -> ProtVer -> GovernanceAction era
UpdatePParams :: StrictMaybe (GovPurposeId 'PParamUpdatePurpose (ShelleyLedgerEra era)) -> PParamsUpdate (ShelleyLedgerEra era) -> !StrictMaybe (ScriptHash StandardCrypto) -> GovernanceAction era
newtype () => GovernanceActionId era
GovernanceActionId :: GovActionId (EraCrypto (ShelleyLedgerEra era)) -> GovernanceActionId era
[unGovernanceActionId] :: GovernanceActionId era -> GovActionId (EraCrypto (ShelleyLedgerEra era))
newtype () => Proposal era
Proposal :: ProposalProcedure (ShelleyLedgerEra era) -> Proposal era
[unProposal] :: Proposal era -> ProposalProcedure (ShelleyLedgerEra era)
newtype () => VotingProcedure era
VotingProcedure :: VotingProcedure (ShelleyLedgerEra era) -> VotingProcedure era
[unVotingProcedure] :: VotingProcedure era -> VotingProcedure (ShelleyLedgerEra era)
newtype () => VotingProcedures era
VotingProcedures :: VotingProcedures (ShelleyLedgerEra era) -> VotingProcedures era
[unVotingProcedures] :: VotingProcedures era -> VotingProcedures (ShelleyLedgerEra era)
data () => GovernancePoll
GovernancePoll :: Text -> [Text] -> Maybe Word -> GovernancePoll
[govPollQuestion] :: GovernancePoll -> Text
[govPollAnswers] :: GovernancePoll -> [Text]
[govPollNonce] :: GovernancePoll -> Maybe Word
data () => GovernancePollAnswer
GovernancePollAnswer :: Hash GovernancePoll -> Word -> GovernancePollAnswer
[govAnsPoll] :: GovernancePollAnswer -> Hash GovernancePoll
[govAnsChoice] :: GovernancePollAnswer -> Word
data () => GovernancePollError
ErrGovernancePollMismatch :: GovernancePollMismatchError -> GovernancePollError
ErrGovernancePollNoAnswer :: GovernancePollError
ErrGovernancePollUnauthenticated :: GovernancePollError
ErrGovernancePollMalformedAnswer :: DecoderError -> GovernancePollError
ErrGovernancePollInvalidAnswer :: GovernancePollInvalidAnswerError -> GovernancePollError
data () => Vote
No :: Vote
Yes :: Vote
Abstain :: Vote
newtype () => Voter era
Voter :: Voter (EraCrypto (ShelleyLedgerEra era)) -> Voter era
createProposalProcedure :: ShelleyBasedEra era -> Network -> Lovelace -> Hash StakeKey -> GovernanceAction era -> Anchor StandardCrypto -> Proposal era
createVotingProcedure :: ConwayEraOnwards era -> Vote -> Maybe (Url, Text) -> VotingProcedure era
renderGovernancePollError :: GovernancePollError -> Text
fromProposalProcedure :: ShelleyBasedEra era -> Proposal era -> (Lovelace, Hash StakeKey, GovernanceAction era)
hashGovernancePoll :: GovernancePoll -> Hash GovernancePoll
verifyPollAnswer :: GovernancePoll -> InAnyShelleyBasedEra Tx -> Either GovernancePollError [Hash PaymentKey]
data () => LeadershipError
LeaderErrDecodeLedgerStateFailure :: LeadershipError
LeaderErrDecodeProtocolStateFailure :: (ByteString, DecoderError) -> LeadershipError
LeaderErrDecodeProtocolEpochStateFailure :: DecoderError -> LeadershipError
LeaderErrGenesisSlot :: LeadershipError
LeaderErrStakePoolHasNoStake :: PoolId -> LeadershipError
LeaderErrStakeDistribUnstable :: SlotNo -> SlotNo -> SlotNo -> SlotNo -> LeadershipError
LeaderErrSlotRangeCalculationFailure :: Text -> LeadershipError
LeaderErrCandidateNonceStillEvolving :: LeadershipError
currentEpochEligibleLeadershipSlots :: ShelleyBasedEra era -> ShelleyGenesis StandardCrypto -> EpochInfo (Either Text) -> PParams (ShelleyLedgerEra era) -> ProtocolState era -> PoolId -> SigningKey VrfKey -> SerialisedPoolDistribution era -> EpochNo -> Either LeadershipError (Set SlotNo)
nextEpochEligibleLeadershipSlots :: ShelleyBasedEra era -> ShelleyGenesis StandardCrypto -> SerialisedCurrentEpochState era -> ProtocolState era -> PoolId -> SigningKey VrfKey -> PParams (ShelleyLedgerEra era) -> EpochInfo (Either Text) -> (ChainTip, EpochNo) -> Either LeadershipError (Set SlotNo)
shelleyPayAddrToPlutusPubKHash :: Address ShelleyAddr -> Maybe PubKeyHash
toConsensusGenTx :: CardanoBlock StandardCrypto ~ block => TxInMode -> GenTx block
fromAlonzoCostModels :: CostModels -> Map AnyPlutusScriptVersion CostModel
toLedgerNonce :: Maybe PraosNonce -> Nonce
toShelleyNetwork :: NetworkId -> Network
fromShelleyPoolParams :: PoolParams StandardCrypto -> StakePoolParameters
fromLedgerPParamsUpdate :: ShelleyBasedEra era -> PParamsUpdate (ShelleyLedgerEra era) -> ProtocolParametersUpdate
emptyVotingProcedures :: VotingProcedures era
singletonVotingProcedures :: ConwayEraOnwards era -> Voter (EraCrypto (ShelleyLedgerEra era)) -> GovActionId (EraCrypto (ShelleyLedgerEra era)) -> VotingProcedure (ShelleyLedgerEra era) -> VotingProcedures era
unsafeMergeVotingProcedures :: VotingProcedures era -> VotingProcedures era -> VotingProcedures era
